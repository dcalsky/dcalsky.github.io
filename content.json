{"meta":{"title":"白玉为堂金为马","subtitle":"70%有趣的灵魂","description":null,"author":"周左左","url":"http://www.noddl.me"},"pages":[{"title":"","date":"2018-03-10T01:33:51.000Z","updated":"2017-09-14T05:02:41.000Z","comments":true,"path":"404.html","permalink":"http://www.noddl.me/404.html","excerpt":"","text":"layout: 404title: “[404]”description: “May the Force be with you :&#41;”"},{"title":"","date":"2018-03-18T11:41:20.000Z","updated":"2018-03-18T11:41:20.000Z","comments":true,"path":"about/index.html","permalink":"http://www.noddl.me/about/index.html","excerpt":"","text":"关于左左网名: dcalsky昵称: 左左邮件: dcalsky@gmail.comGithub: http://github.com/dcalsky"},{"title":"标签","date":"2016-05-01T04:39:04.000Z","updated":"2017-09-14T02:50:40.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.noddl.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"接offer这件事","slug":"offer-gf","date":"2018-05-05T16:27:15.618Z","updated":"2018-05-05T16:32:18.107Z","comments":true,"path":"2018/05/06/offer-gf/","link":"","permalink":"http://www.noddl.me/2018/05/06/offer-gf/","excerpt":"今天跟好朋友又一次不可避免地讨论起了她的对象。她的对象总是很神秘，我也很是佩服她的耐心。因为她的对象已经很久很久没有出现了。","text":"今天跟好朋友又一次不可避免地讨论起了她的对象。她的对象总是很神秘，我也很是佩服她的耐心。因为她的对象已经很久很久没有出现了。 我的朋友，说她没有对象，这是不完全不能被认同的，她毕竟是身为一个如此优秀的女孩子。所以与其说她很久没有谈恋爱了，不如说她是完全不想去找。所以我俩话题的风向标，总是从一声“唉”的感慨开始，慢慢转向情感话题。从最初坚定的单身贵族主义，到如今各种为对方儿子取名，可见对方近些年，各个牌子的狗粮也都尝了个遍。虽然都是无意义地瞎扯，但是好歹也是有话题的。 回到话题风向标还没倒转的那会儿。最近的毕业季，我和她都开始忙着找工作单位实习、一旦涉及到资本主义，就会提起钱；一提钱，双方就会因为钱而签约。而offer就是“签约”的儿子，但“签约”只负责生，不负责养。那自然的，接offer的我们就成了最苦逼的保姆。这种吃力不讨好的事情，却人人都挤破头地喜欢。接了offer，好似万年单身狗，突然有了一个愿意跟你处下去的姑娘。虽然日子可能不会太长，但是好歹不再依靠吃狗粮为继了。而且接offer这件事本身，就和谈恋爱也有很多相同点。 为什么我坚持不用社交软件（知乎算不算），因为我总是感到，如果一个人想要脱单就去用社交软件，就好像：在你毕业之际走投无路之时，突然发现自己还有母校这种靠山存在（平时翘课的时候永远也想不起）。于是你抱紧了学校的大腿，想让学校给你安排一份实习。学校当然愿意啊，不然芸芸学子打着母校的英名在外好吃懒做传出去多不好看。你也不在乎实习单位的好差了，只要有一根稻草能抓住就已是万幸。社交软件就像学校一样，当然很容易就能帮助我们安排一段良好的因缘，毕竟它一次塞上百个姑娘给你“任君自由选择”。 这样的统筹安排，在缘分论者的观念中是不可饶恕的。所以自然，多数人选择到社会中“广撒网”。临近毕业，诸如以老学长的身份多参加一下社团活动、学生会的哥们推荐一下、退伍的兵哥哥帮忙在军训的时候物色一下新来妹子之类的老渔夫本领，不下海当然是学不会的。不过宅在家里的二次元渔夫，也是完全不屑这种现充行为的。说回接offer，既然广撒网这种行为是有客观原因的，那么各种投简历收offer，也自然无可厚非了。BAT走一走，FLAG遛一遛，一圈下来再去小厂装一波，自然收获颇丰。也正是应了杨同学那句话：“如果爱情要有收offer这么简单，那就好了” 老渔夫表示想要一条前凸后翘金龙鱼的心情，就像一名应届生想要收到一份工资高加班少offer的心情一样迫切。然而金龙鱼不常有，现实里渔网里大多都是黝黑的鲶鱼。很多企业也喜欢吊着应届生，面试周期极长无比，仿佛你向金龙鱼表白的时候，她却对你说：“我有一段很长的考察期，时不时会派出我的前男友们来刁难你，用以考验你对我的爱”。这个过程短则一两月，长则半年有余。在这期间，她前男友们的百般刁难让你抓破了头，而金龙鱼的肥美又让你日夜好逑。当然，最难受的是，网里已经捕获的鲶鱼还在上下乱窜，时不时提醒一下你是不是该考虑一下它们了。往往几日之后，鲶鱼便会纷纷坦言，如果你一周之内再不有所表示，那么它们就会离开。 于是你仔细一想，发现事情并不简单。如果鲶鱼们都走了，而金龙鱼又没有钓到，那么自己不久以后又将回到曾经吃狗粮度日的黑暗生活。口腔里还弥漫的狗粮味窜到了脑门，大脑开始大吼，并警告你是时候该做出选择了。你是要吃前凸后翘未到手的金龙鱼，还是在眼下这些鲶鱼挑一只过日子。 长辈通常会跟我们说，爱情这个东西，只有更好的没有最好的。我们选择了一个，总会有更优秀的目标摆在我们面前。可是我们年轻人其实也总是会选择抛开这些教诲，并给了长辈一头槌，在追求理想中金龙鱼的道路上越走越远，顿顿狗粮也在所不惜。因为啊，在这个过程中，我们已经让自己变成了一个更加优秀的人。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[]},{"title":"你和播放器","slug":"player-with-you","date":"2018-04-20T14:43:11.000Z","updated":"2018-04-20T14:47:00.000Z","comments":true,"path":"2018/04/20/player-with-you/","link":"","permalink":"http://www.noddl.me/2018/04/20/player-with-you/","excerpt":"呐，不知道你有没有听说过一种比喻 与其说是用播放器，不如说是与播放器谈恋爱","text":"呐，不知道你有没有听说过一种比喻 与其说是用播放器，不如说是与播放器谈恋爱 听起来，就好像拿女朋友与播放器相提并论 这听起来似乎很荒谬，也确实很荒谬 “换一个新的播放器就像与女生分手一样” 你在前任那里收藏的一首首歌曲，路边听的，挂耳机在地铁上听的，甚至是她不自觉推荐给你的 她推荐的歌恰到好处地也受你的青睐，就像你肚子里可爱的小蛔虫 尽管有很多小毛病，还是克制不住地爱她，逢人就夸 经常会这样想着 “让我跟她分开，这是不可能的事情吧。” 不知道从什么时候开始，你觉得她越来越作 她嘟嘴生气的样子，开始懒得去搭理 甚至有时候，三番五次触及你的底线 像是老套的电视剧，这一天终于到来了 “其实这不代表我不爱她了，只是不得不分开而已。“ 朋友开始给你物色其他”选择“ ”选择“会唱的歌比前任丰富得多，真是一颗有趣的灵魂呢 性格也比前任要好很多，是一颗完美的灵魂 可是啊，在前任那里收藏过的歌曲，是在天天搭乘的地铁上听的，是熟悉的小巷里听的 现在偶尔听到它们，也觉得这些歌很有过去的味道。 但是你在现任那里，是无论如何也不会继续收藏了吧。 如果听过的歌，能立马抛之脑后 或者收藏的歌单也能一并转移 那么对于播放器的比喻，原谅我举的实在不恰当。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[]},{"title":"307寝室敏捷运动宣言","slug":"307-sport","date":"2018-03-24T15:10:50.000Z","updated":"2018-03-24T15:35:23.000Z","comments":true,"path":"2018/03/24/307-sport/","link":"","permalink":"http://www.noddl.me/2018/03/24/307-sport/","excerpt":"介于307寝室的诸位纷纷发现自己在2017年，2016年以至追溯到很久以前，都发现自己在慢慢变胖。从而到了2018年，发现身体开始发酵。终于有一天，我们提出了寝室敏捷运动宣言…","text":"介于307寝室的诸位纷纷发现自己在2017年，2016年以至追溯到很久以前，都发现自己在慢慢变胖。从而到了2018年，发现身体开始发酵。终于有一天，我们提出了寝室敏捷运动宣言… 敏捷运动宣言我们一直在实践中探寻更好的减肥健身方法，身体力行的同时也帮助室友。由此我们建立了如下价值观： 相互鞭策 高于 自律健身强制罚款 高于 友情提醒拍照为证 高于 口头描述优先运动 高于 减少饮食 也就是说，尽管右项有其价值，我们更重视左项的价值。 具体规章每天必须进行一项高强度的体育运动，或走路8000步。选择以上的任何一项，都需拍照或截图作为证据，发到Chat group中。 如果有人在当日尚未达标，而被同行检举揭发，发现确有其事，则被检举人需向其他成员缴纳罚款金。另，未被发现或检举则不算数。 成效自2018年三月份以来，寝室人均每周运动时间长达5小时。体重逐周递减，可见敏捷运动法初见成效。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[]},{"title":"爱江山，爱摄影","slug":"photography","date":"2018-03-20T04:40:36.000Z","updated":"2018-03-20T04:51:56.000Z","comments":true,"path":"2018/03/20/photography/","link":"","permalink":"http://www.noddl.me/2018/03/20/photography/","excerpt":"经某同学的提醒，出的片子，还是要放出来让大伙一起瞧瞧比较好。持续更新着…","text":"经某同学的提醒，出的片子，还是要放出来让大伙一起瞧瞧比较好。持续更新着… Strikingly实习时送的杯子，容量特别大，喝满3杯就似乎满足了我一天的需水量。公司有很多这样的杯子，都藏在飘窗边小床的里面。 某同学退还给我的小鹿，我也没地方放，每天抱着睡觉。10月份的时候突发奇想，想让她晒晒太阳，顺便来了一张萌照。 在苏州诚品生活楼顶拍的，当时身边有两个小伙伴，大家一起手忙脚乱地注视着暮色到来。再次他们带我一起玩耍。 健身回来发现有月全食，赶紧借了洞洞的长焦，跟边上一起拍照的同学聊了很久才回去。回去后发现没对好焦，糊了。 其实一开始我也不相信校园里有这样的建筑的，其实就在七号楼一楼那个小平台，抬头就是。那天临时起意，决定把嘉定校区全部的建筑拍个遍，我认为这是最好也是最出乎意料的一张。 也是拍建筑那天，在校园西北角落发现的一栋建筑。 2018年1月25日，上海下了很大的雪。我带着刘看山一起出门看雪景。","categories":[{"name":"摄影","slug":"摄影","permalink":"http://www.noddl.me/categories/摄影/"}],"tags":[]},{"title":"浅谈事务隔离级别","slug":"transaction","date":"2018-03-20T03:41:48.000Z","updated":"2018-03-23T08:40:16.000Z","comments":true,"path":"2018/03/20/transaction/","link":"","permalink":"http://www.noddl.me/2018/03/20/transaction/","excerpt":"学数据库的时候，老师就叫我们背事务隔离级别的概念，默写出相应可能会出现的问题。那么究竟在哪些场景下会因为隔离级别的不同而出现这些问题呢。","text":"学数据库的时候，老师就叫我们背事务隔离级别的概念，默写出相应可能会出现的问题。那么究竟在哪些场景下会因为隔离级别的不同而出现这些问题呢。 事务隔离性事务的ACID大家自然都背得很熟了，那么隔离性就是定义了数据库系统中一个操作的结果在何时以何种方式对其他并发操作可见。也就是说，数据库多个事务在不同情况下，是区别并发执行与串行执行的。正因为如此数据库设置了锁的概念，来确保并发控制机制能够有效运行下去。 所以谈论到的隔离级别，通常也与锁设置方式以及锁类型有关。 隔离级别为了获取更高的隔离性，数据库系统的锁机制或者多版本并发控制机制都会影响并发。很多数据库定义了不同的事务隔离级别来控制其锁的程度。根据标准定义，我们都知道有：未提交读 read uncommited, 提交读 read commited, 可重复读 repeatable read, 可串行化 Serializable。 虽然中文很拗口，但是这些隔离级别的名字其实是解决上一个隔离级别所出现问题而提出的解决方案（除了 read uncommited）。 他们的区别之一在于锁对于R/W事务上设置的不同，当然最高隔离级别也存在对表锁的设置。 read uncommited: 不对读事务设置锁；对写事务设置行级共享锁 read commited: 对读事务设置行级共享锁，读完就释放；对写事务设置行级互斥锁，直到事务结束才释放 repeatable read: 对读事务设置行级共享锁，直到事务结束才释放；对写事务设置行级互斥锁，直到事务结束才释放 Serializable: 所有事务串行执行，读事务设置表级共享锁；写事务设置表级互斥锁 可以看出来，隔离级别的提高，其实也是锁的严格程度的提高。要知道，相同条件下，锁越多，越严格那么性能也就越低。 除了脏读以外，其他因为隔离级别导致的问题，都会出现在当前隔离级别与比当前隔离级别要弱的隔离级别中。 共享锁：多个事务对于加了锁的数据，只能读，不能写；互斥锁：排他锁允许当前事物删除或更新一行记录，其他事务不能操作该数据。 脏读只会出现在read uncommited隔离级别的问题，因为read uncommited不对读事务设置锁，并且对写事务只设置行级共享锁。 示意图如下: -T1–T2–R1–W1–R2–T2–T1- T2事务全程发生在T1事务的进行时，因为没有对记录设置行级互斥锁，所以在W1写操作进行前后，可以随时读取该记录，导致了R1和R2读到的不一样。非常危险，这就是脏读。 不可重复读因为读事务在读完一条数据以后(没有结束事务)，就立马释放了行级共享锁，归根结底，就是这一原因导致了不可重复读的发生。 -T1–R1–T2–W1–T2–R2- R1读完就释放了锁，但是T1事务未结束，这时候另外一个T2事务开始了，在T2事务结束前，第一个事务都不能对这条记录进行加锁了(想想为什么)，所以R2要在T2结束后进行。这时候R2读到的数据与R1又不一样了。这就是不可重复读。 幻读我们都针对某一记录读操作与写操作添加锁，并且保证了事务结束时才释放锁了。这是还会有问题吗？ 我们一直只针对某一条记录来进行操作，这时候要是表内又新来了一条数据呢，它可不受任何读写锁的约定呀。 示意图: -T1–R1–T2–C–T2–R2–T1- R1、R2在这里表示了读整个表的操作，C代表了在T2事务期间，新增的一条记录，你会发现在事务T1内的两次读（R1，R2），得到的数据不一样。 因为R1只对原有的N条记录加了锁，而没对新增的记录加锁，这就导致T2事务可以与T1事务并发执行，最终导致了R2与R1读到的记录不一致。 所以我们可以提高事务隔离级别来防止这种情况出现，但是在也就是意味着，事务之间也无并发执行可言了。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[]},{"title":"静态博客迁移评估","slug":"blog","date":"2018-03-19T01:18:45.000Z","updated":"2018-03-23T08:48:07.000Z","comments":true,"path":"2018/03/19/blog/","link":"","permalink":"http://www.noddl.me/2018/03/19/blog/","excerpt":"一开始我所有的站点都部署在Vultr提供的日本VPS下，包括本博客。后来遭不过当初首充的200刀所剩无多，以及遇到奇奇怪怪丢包的网络问题。终于开始了漫漫迁移之路。","text":"一开始我所有的站点都部署在Vultr提供的日本VPS下，包括本博客。后来遭不过当初首充的200刀所剩无多，以及遇到奇奇怪怪丢包的网络问题。终于开始了漫漫迁移之路。 第一阶段 - 自建在VPS下使用了nginx作为web server，无论是在静态资源提供上还是承载力上(其实根本没多少PV)，都表现良好。将静态文件全部推送到Github后，再通知VPS上跑的fish-hook，及时地把最新内容给拉下来。能够做到热更新，以及一键化操作。 无奈，遇到了网络问题。于是放弃了这条看似完美的解决方案。😭 第二阶段 - X page作为仓库托管商们，Github、Coding和Bitbucket还提供了Repo pages的优秀服务。每个Repo或Account都能创建属于自己的静态页面，还能享受托管商赠送的二级域名。 2018年3月19日，三个服务商提供的服务，我在一晚上全部都试过了，从访问速度、域名绑定、上手难度三个情况进行评估，如下表： 服务商 访问速度 域名绑定 上手难度 Github 慢(大陆部分地区网络无法连接) ✅ 低 Coding 中 ✅ 中 Bitbucket 快 ❌ 低 Github page: 大陆访问较慢经常失败，且部分地区网络压根无法访问。但提供顶级自定义域名绑定 Coding page: 访问不流畅，但是不存在失败情况。提供顶级自定义域名绑定 Bitbucket page: 海内外访问都极快，但不提供自定义域名绑定 其他建议除了上述两种就没有别的选择了吗？当然不是，Heroku、Wordpress、Ghost都提供了免费或收费的服务。还有一些国内的服务商，就不一一列举了。 小结综上看起来似乎Bitbucket会更好，但是我有一个noddl.me的域名，我可不想浪费它。但是不能绑定自定义域名这一个特点让我无比痛心💔。 当然了，不排除可能会存在奇技淫巧，让Bitbucket支持自定义域名。隐式跳转是行不通的，因为国内的DNS服务商目前应该都不支持将域名隐式跳转到未备案的域名上。 后来一想，要不直接转战知乎吧？但是一想到知乎的编辑器，又马上放弃了这个念头🤣。 最终选择了Github，因为我毕竟还是一个热爱填格子的少年。 最后欢迎访问我的博客: http://www.noddl.me","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[]},{"title":"HTTP2特性漫谈","slug":"http2","date":"2018-03-18T12:34:27.000Z","updated":"2018-03-23T08:48:12.000Z","comments":true,"path":"2018/03/18/http2/","link":"","permalink":"http://www.noddl.me/2018/03/18/http2/","excerpt":"在2018年春招中，没有回答出HTTP2新特性的具体细节，甚是懊恼。看来不能仅仅因为兼容性的问题，就不顾HTTP2这票潜力股😈。","text":"在2018年春招中，没有回答出HTTP2新特性的具体细节，甚是懊恼。看来不能仅仅因为兼容性的问题，就不顾HTTP2这票潜力股😈。 首先概况几个HTTP2相对于HTTP1.1的新特性: 二进制分帧层 头部压缩 多路复用 Server Push 为什么不是HTTP/1.2?为了实现 HTTP 工作组设定的性能目标，HTTP/2 引入了一个新的二进制分帧层，该层无法与之前的 HTTP/1.x 服务器和客户端向后兼容，因此协议的主版本提升到 HTTP/2。 二进制分帧层HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。如下图所示，它在应用层里，多定义了一个新的子层： 而HTTP的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的编码方式变了。HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。但是！HTTP/1.x 客户端无法理解只支持 HTTP/2 的服务器，反之亦然。 数据流、消息和帧 数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。stream 消息：与逻辑请求或响应消息对应的完整的一系列帧。message 帧：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。frame 他们遵循以下的规则: 所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。 每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。 每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。 帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。 所以大致的示意图是: 简言之，HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。这是 HTTP/2 协议所有其他功能和性能优化的基础。 头部压缩HTTP头是比较长的，如果发送的数据比较小时，也得发送一个很大的HTTP头部。当这种请求数很多的时候，会导致网络的吞吐率不高。并且，比较大的HTTP头部会迅速占满慢启动过程中的拥塞窗口，导致延迟加大。所以HTTP头的压缩显得很有必要。 HTTP/2使用了新的压缩方法，在规范RFC 7541进行了说明。关于头部压缩，规范的附录举了个很生动的例子。这里用这个例子做为说明，解释可以怎么对HTTP头部进行压缩。 多路复用传统的HTTP/1.1为了提高并发性，得通过提高连接数，即同时多发几个请求，因为一个连接只能发一个请求，所以需要多建立几个TCP连接。建立TCP连接需要线程开销，Chrome同一个域最多同时只能建立6个连接(考点哟)。所以就有了雪碧图、合并代码文件等减少请求数的解决方案。 在HTTP/2里面，一个域只需要建立一次TCP连接就可以传输多个资源。多个数据流/信号通过一条信道进行传输，充分地利用高速信道，就叫多路复用（Multiplexing）。 在HTTP/1.1里面，一个资源通过一个TCP连接传输，一个大的资源可能会被拆成多个TCP报文段，每个报文段都有它的编号，按照从前往后依次增大的顺序，接收方把收到的报文段按照顺序依次拼接，就得到了完整的资源。当然，这个是TCP传输自然的特性，其实和HTTP/1.1没有直接关系。 那么怎么用一个连接传输多个资源呢？HTTP/2把每一个资源的传输叫做流(Stream)，每个流都有它的唯一编号stream id，一个流又可能被拆成多个帧(Frame)，每个帧按照顺序发送，TCP报文的编号可以保证后发送的帧的顺序比先发送的大。在HTTP/1.1里面同一个资源顺序是依次连续增大的，因为只有一个资源，而在HTTP/2里面它很可能是离散变大的，中间会插着发送其它流的帧，但只要保证每个流按顺序拼接就好了。如下图所示： Server Push当我们使用HTTP/1.1的时候，Chrome最多同时加载6个资源。 虽然使用了HTTP/2没有了只能同时加载6个资源的限制，但是我们发现css或js需要在html解析了之后才能触发加载，而图片如果是通过JS的new Image触发加载，所以它们需要等到JS下载完并解析好了才能开始加载。 所以Server Push就是为了解决这个加载延迟问题，提前把网页需要的资源Push给浏览器。Nginx是从1.13.9版本开始支持。给nginx.conf添加以下配置： 123456789101112location = /html/demo/index.html &#123; http2_push /html/demo/main.js; http2_push /html/demo/main.css; http2_push /html/demo/images/0.png; http2_push /html/demo/images/1.png; http2_push /html/demo/images/2.png; http2_push /html/demo/images/3.png; http2_push /html/demo/images/4.png; http2_push /html/demo/images/5.png; http2_push /html/demo/images/6.png; http2_push /html/demo/images/7.png;&#125; 如此一来就可以享受预加载带来的页面加载速度上的提升了。 参考资料: https://fed.renren.com/2018/03/18/chrome-http2/ https://developers.google.com/web/fundamentals/performance/http2","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[]},{"title":"左左的2018暑期实习面试经历","slug":"interview","date":"2018-03-18T07:13:05.000Z","updated":"2018-04-13T12:15:22.000Z","comments":true,"path":"2018/03/18/interview/","link":"","permalink":"http://www.noddl.me/2018/03/18/interview/","excerpt":"因为在17年就已经面过蚂蚁金服前端岗（据说拿了B+），所以在今年2月左右就收到蚂蚁金服前辈的内推邮件。由于当时在忙着美赛，就没准备投递的事情。转眼就到寒假，化身一枚咸鱼看看龙灯爬爬山，又耽搁了一阵子。直到寒假最后一天，才经过前辈点醒，是时候要开始准备春招了。","text":"因为在17年就已经面过蚂蚁金服前端岗（据说拿了B+），所以在今年2月左右就收到蚂蚁金服前辈的内推邮件。由于当时在忙着美赛，就没准备投递的事情。转眼就到寒假，化身一枚咸鱼看看龙灯爬爬山，又耽搁了一阵子。直到寒假最后一天，才经过前辈点醒，是时候要开始准备春招了。 开学就马上更新好了简历，分别给阿里腾讯百度(BAT)投递了过去，大致是前端、node、运维岗。心里想着能去做全栈就好了，总不希望做个切图仔的。 阿里巴巴阿里的春招形式与去年没多大变化，文化网测 -&gt; 编程题网测 -&gt; 5、6轮面试，基本就走完了流程，其中应该是4轮技术面 + 2轮HR。 网测文化面不多说，我的价值政治观一直比较正确。接下来就是笔试题，因为当前还在春招时期，碍于泄题之嫌，我就不细说了，总之就是一题，限时30分钟，前端题不难，但是DOM操作要练好。 一轮完成网测后的两天，第一轮电面就打电话来了。3月12日。没有自我介绍，没有项目介绍，直接开始问后端：消息队列、数据库优化、算法、底层网络等等。一口气回答了一堆，然后开始疑惑我投的前端岗位，怎么面这么后端的东西。后来发现是搞错了，因为我的简历里包含了很多后端的东西。🤣 个人对压力测试玩的比较少，只是了解一下大概。数据结构的考点基本是教科书式的，链表排序之类的。HTTP和RPC，哈希表。 虽然自我感觉发挥不好，但是面试官却觉得还好。 二轮根据去年的经验，一般是要隔个2、3天，才有下一轮面试。但是没想到3月13日，也就是第二天，下午同一时间，二面开始了。（当时我正要进教室上课呢 😈） 于是匆匆忙忙下楼，在校园里随便找了一个小草丛开始了第二轮电话面试。 二轮持续了整整100分钟，因为有一些没有标准答案的水问。 编辑距离算法 手写快排 union sql查询 DP 二叉树 关于Kubernetes服务编排项目的架构 服务解耦 数据库优化措施、读写分离之类的 数据库事务隔离 也谈了谈敏捷开发，以及我对项目过程的把控。在这两点上，我还是回答得比较好的。关于Kubernetes等用于微服务的技术，基本是根据我简历里写的项目来问。 最后，透露我可以转到全栈岗，于是下一轮开始由前端组进行交叉面试。我不禁喜上眉梢。 三轮又是一天以后，3月14日。下午2点，一个声音好听的小哥哥开始了对我的在线面试。 我在简历里写了精通webpack，于是开始让我谈谈webpack的实现机制，以及详细问了css-loader的实现。还让我讲了讲我以前做过的一些plugins，以及babel插件。 蚂蚁作为React大户，React相关的东西肯定是必考的，redux生态，Virtual DOM。虽然我在期间依然安利了一波Angular，但是效果似乎并不好哈哈😈。 最后开始手写一个Promise，效果不错。开心地结束了这次面试。 四轮依然是交叉面，但是都是些开放性的问题。例如看什么技术博客、你的强项是什么之类的。与面试官谈了谈我对rxjs的好感度，以及分析了一下medium为什么会火起来 2333。 因为是在开车的时候被打了电话，一回到寝室也没准备就开始了。气氛很轻松，开心地结束这轮。 五轮依然交叉面前端，但是更多是谈谈做过了哪些项目。我讲了讲微服务相关的项目，以及webpack遇到的坑。据悉下一轮就是HR面啦。 腾讯怪不好意思的，投腾讯的时候很粗心，不小心把去年的low简历投了过去。导致了尴尬。 去年其实也投了腾讯，而且是内推。但是愚人节那天去了崇明岛玩，没带电脑。下午的时候手机收到要笔试的通知，自然是翘了。于是就没有后续了。 今年没有找内推，野投。有趣的是，很快有了回应，并告诉我周六去上海腾讯总部面试。 笔试3月17日。感慨一下腾云大厦离我校好远。 接待我的是一个笑起来甜甜的小哥，坐下后马上开始做笔试题。大致是50道左右的多选题，从操作系统、C++、算法、前端、网络、数据库应有尽有。关键还是多选题，是一场苦战。 一面差不多做到最后一题，我的面试官到了。笑容小哥哥在边上改我的卷子，面试官开始面我。 先自我介绍，然后： 用户体验优化 浏览器机制 HTTP2 webpack 旧项目改造，与我在前东家做的rails改造很像 项目选型考虑 二面二面以node为主 Stream express middleware实现 单线程调用栈，以及优先级 webpack DNS实现 看得出来，小哥哥对我还是挺满意的。更多题目我也忘记了，印象深刻的就这么几个。 三面胡子小哥哥坐镇，让我谈谈HTTP2，我背了一些新特性，但是说不出所以然。还有前端如何做一款类似于美图秀秀的图形处理程序。 三面比较短，说实话，我答得不好。因为确实缺少相关的经验。 最终面结果挺理想，跟我谈了谈该团队目前在做的事情。Typescript讲了讲。具体结果还是要看我后续的更新吧。 复试3月23日下午，被通知要去参加复试… 恐怖的压力面，boss全程看电脑。技术倒是不难，就是氛围有点儿紧张。让我这个老油子也有点活泼不起来。 继续等下一轮吧。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[]},{"title":"基于Kubernetes与Istio的微服务结构设计","slug":"microservice","date":"2018-01-23T17:14:00.000Z","updated":"2018-03-18T12:36:56.000Z","comments":true,"path":"2018/01/24/microservice/","link":"","permalink":"http://www.noddl.me/2018/01/24/microservice/","excerpt":"","text":"虽然选择了17年秋季的Web与SOA课程，虽然SOA与微服务有着很强的联系，而且课程名字也叫SOA，但是在课后进行的都是与微服务有关的研究与编码。在这期间，查阅了多方资料，看了许多知名架构师的演讲视频以及分享的幻灯片，自己也产生了很多奇思妙想。归根结底，就是为了解决自己对微服务架构设计方面所产生的疑问，而做的这一切工作。写文记录这一过程。 定义学一样新事物之前，在我未踏足这个领域时，我热衷于找到名人给这一事物下的权威定义。在踏足之后，再根据自己的理解进行补充（以及自我说服🤣）。 Microservice Architecture这个网站光是从域名上，就给我一种靠谱踏实的感觉。大大的标题: What are microservices?以及回答就足以给萌新关于微服务一个很好的定义: Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of loosely coupled services, which implement business capabilities. The microservice architecture enables the continuous delivery/deployment of large, complex applications. It also enables an organization to evolve its technology stack. 翻译一下: 微服务，也就是所谓的微服务架构。是一种将应用程序构建为一系列松散耦合服务的架构风格，以此来实现业务功能。微服务架构使得大型、复杂的应用在持续分发\\部署上成为可能。它也使得一个组织能够发展其技术栈。 果然够官方，我喜欢。虽然一点都不懂😑。 Kube概念因为玩过Docker compose &amp; Docker swarm，所以其实可以将它们与kube的一些概念进行映射起来。Kubernete的基础概念可以参考Kubernetes指南来进行学习，但是不能只记而不去操作。 ##","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"microservice","slug":"microservice","permalink":"http://www.noddl.me/tags/microservice/"},{"name":"kubernete","slug":"kubernete","permalink":"http://www.noddl.me/tags/kubernete/"},{"name":"istio","slug":"istio","permalink":"http://www.noddl.me/tags/istio/"}]},{"title":"你有什么道理后悔没有早点知道？","slug":"thermos","date":"2017-11-20T16:20:00.000Z","updated":"2018-03-18T16:09:05.000Z","comments":true,"path":"2017/11/21/thermos/","link":"","permalink":"http://www.noddl.me/2017/11/21/thermos/","excerpt":"","text":"小时候，距离我家不远处开了一家热水房，我每天放学都要跟妈妈去打热水。 人们提着大大小小的热水瓶，站满小小的热水房。 大瓶4毛钱，小瓶2毛钱。 我家有一只外观特别的热水瓶， 带有花的纹理，似乎还有一个少女的面庞印在上面。 它比其他的热水壶小一圈，所以总是由我来负责拎它。 我记得那是一个冬天，天暗特别早，热水房门口早早排满了人。 放学后我照常与妈妈去打水。 小的时候，我陪妈妈的时间还是非常长的。长到我天天念叨地想长大。 妈妈怕开水烫到我 每次轮到我们的时候，都是由她来接水。 所以每一次我都会站在一旁看着妈妈操作，看着她的侧脸。 现在回忆起来，那个时候的妈妈真的好年轻 还留着长发，没有烫，没有卷。 她轻松地提起两只热水瓶，同时打开两个出水口。 滚烫的开水源源不断送入瓶中，还伴随着白白的热花花，还有呼呼的声音。 快满的时候，音调会越变越高 妈妈及时按下木塞子，并齐嗖嗖地把两个热水瓶同时拿到下面，让我提着。 那个时候的妈妈，干练的样子 让我感觉到天底下没有事情是我妈妈搞不定的。 她就是这么的伟大，无敌。 那天的天真的好黑啊，明明时间还很早。 我们打完热水，照常就回了家。 走在楼梯上的时候，还是有说有笑 直到我感觉右手的热水瓶，被什么东西磕了一下。 就听见一声巨响，之后地上塞满了水，散着热气。 哦，热水瓶的瓶胆破了呢。 到时候再去买一个就好了，我简单地想着。 妈妈回头看了一眼，表情似乎变得很古怪。 她什么都没说，快步走到家里。 回到家里，我终于知道为什么天这么黑了， 原来是小区停电了。 我在证实确实停电后，跑到厨房问妈妈晚餐该怎么办。 可是却发现妈妈趴在餐桌上，埋着头 像极着我那个同桌被我欺负后的样子。 妈妈此时不是应该笑着带我出去吃饭的吗？ 她…她怎么了？ 我开始不停地询问妈妈怎么回事，是不是身体不舒服。 她只是摇头，依然没有抬起头。 我静静地坐在边上等着她，满头雾水。 然后她就发出哭声，抬起了头，满脸泪痕。 我一看妈妈哭了，马上就慌了，跟着哭。 我无敌的妈妈哭了，我怎么办？ 我一边哭，一边还是问，妈妈你怎么了。 也不知道过了多久 我听见她断断续续地说：『这是我妈妈送给我结婚礼物』 原来我打破了外婆送给她的礼物。 原来她从小就喜欢这个特别地热水瓶 常常追着外婆问什么时候能把这个热水瓶送给她。 外婆说：『你出嫁了，我就把它当做特别的礼物送给你』 我无敌的妈妈，居然为了一个热水壶哭了。 她经历了这么多，都没有难倒她，为什么为了一个热水瓶哭。 只是因为外婆送给她礼物，可是只是一个普通的，寻常的热水瓶。 当时的我不懂，跟着哭，只是因为妈妈哭了。 当时的我不懂，这个东西对于她来说有多么重要。 之后的我依然不懂，为什么同班一个软弱的同学，可以为一只被折断的笔变得凶狠。 在无意破坏家里早已积灰的一件物品后，父母对我表达原谅的笑脸背后，又藏着多少回忆的消散呢？ 你有什么道理后悔没有早点知道？ 外婆已经走了这么久了，我才回想起来她留下的礼物。 你有什么道理后悔没有早点知道？ 父母在不经意的瞬间，也有孩子的一面，而我们却残忍地伤害了他们那么久， 当年的孩子们还是孩子，只不过是成了别人的父母而已。 时光时光啊，请你对我们的大姑娘再温柔些吧。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[]},{"title":"与Strikingly的各位一起度过的实习时光","slug":"intern_in_strikingly","date":"2017-09-25T11:32:00.000Z","updated":"2018-03-18T11:51:24.000Z","comments":true,"path":"2017/09/25/intern_in_strikingly/","link":"","permalink":"http://www.noddl.me/2017/09/25/intern_in_strikingly/","excerpt":"你问我是要做泰坦尼克的螺丝钉，还是做帆船上的桅杆。 在Strikingly度过了为期两个多月的实习，没想到那么快就要离开了。在实习期间，我晚上回到宿舍，都会回想今天学到了什么，为团队作了哪些贡献。令我惊喜的是，几乎每天都是收获满满，无论是在人际上，还是技术上。","text":"你问我是要做泰坦尼克的螺丝钉，还是做帆船上的桅杆。 在Strikingly度过了为期两个多月的实习，没想到那么快就要离开了。在实习期间，我晚上回到宿舍，都会回想今天学到了什么，为团队作了哪些贡献。令我惊喜的是，几乎每天都是收获满满，无论是在人际上，还是技术上。 回忆面试的时候，冲着Frontend intern去面试的。面试我的是帅气的达峰，他在之后也一直担任我的导师。因为当时也在同时进行阿里的面试，所以也会在心里进行对比。阿里面试注重知识面的广度，而Strikingly注重深度，希望面试者能在某一个问题上有着自己的见解与实践。 特别好玩的是，达峰在最后问我：“我这里有一道简单的题和一道难的题，你选哪一个？”。还没等我回答，他就马上说：“嗷，你选难的！” 😂 扁平化管理每个人都有自己的Task列表，而不是由一级级的管理层下达任务，来告诉你应该做些什么。但是在Onboarding的时候，还是需要按照Bootcamp的规则来一步步做的，为的是熟悉团队的业务以及办公流程。当然作为实习生，我还是希望达峰能布置一些任务给我的。 大家都能像朋友一样，只有在正经忙工作并且产生分歧时，才会展现出在团队中的话语权。其他时候，都是在和睦地讨论着，博采众长以获取一个best solution。 阿姨，能多夹一块肉给我吗包三餐算是企业文化特色么？伙食并不是在办公室烧制的，但是每次打饭阿姨拿着一锅锅饭菜来的时候，真的都是热乎乎的。 每次到饭点，阿姨就会在办公室里打铃, “Duang”的一声，大家都立马化身立着耳朵的猫，成群结队跑到16F去会餐。此时16F会议厅就摇身一变，变成一个大饭堂，大家排着长长队伍，等着阿姨发稀有菜。 什么是稀有菜呢？就是因为数量限制而限量发放的菜肴。我会说我每次都会厚脸皮地求阿姨给我多夹一些么。 夹完菜之后，大家都会站着吃，所以站着吃也算是我们的企业文化特色么?这个时候无数思维碰撞出的火花就会迸发，谁说程序员不善言谈的？就算饭菜都被吃完了，也不急，要先把想法说清楚才罢休。许多产品、设计小姐姐都待在16楼，然而大家都似乎都不把握这个上楼的机会的样子。 Demo Time！每周五在午饭后，我们帅气的陈海沙CEO大大，就会召集大家开一个一周新产品新功能演示会。我因为是做基础设施工作的，在职的两个月，只有幸上台讲过一次，感觉大家都被我口语弄得云里雾里（大雾 这个时候，各路大神就会迫不及待大谈自己过去一周做的工作成果。各种飙英语，各种专业术语，以及满满的自信覆盖全场。正是因此，我们的产品才会推进的如此之快，一个个功能背后都是一场场Demo time，怀揣着大家的汗水online的。 Awesome Tech Stack好吧，回到我的major field。虽然入职后所在的工作与Frontend intern这一身份不一致，基本是在做前后端分离架构这方面的时期。但是作为一个前端的眼光来看项目，Strikingly所表现出的，对前沿技术的稳定性与创新性的追求还是非常有劲头的。React以及周边生态，包含Webpack打包自主研发的测试框架。当然不能就这样算了，Strikingly作为一个建站平台，对于追求客户的体验，已经到了淋漓尽致的地步。所以我们每次的代码改动，都要对endpoint负责。 所以团队内部开发了许多监测工具，对于子站的实时监控，以及多套线上版本部署策略，CI工具以及hotfix机制，都非常具有前瞻性。（我司还是webpack的主要资助商之一哟 没有把网站弄糟过的员工不是一个cool员工达峰跟我说：“改基础设施，就要润物细无声，不然全团队都要追着你打。”然而我依然在过程中没有做到润物细无声😁，导致了非常多的问题，这些问题大多都在QA环境以及本地开发环境被解决了。但是依然有一部分，因为疏忽到了production，影响到了全站。比如CSS文件体积突然地暴增，大了400%哟。还有因为autoprefixer功能browser list没有设置到位，导致一些浏览器的兼容失效等等。 发生了这些事情，显得我非常unprofessional，其实场面一度变得非常尴尬（比如我少了一几个逗号引发的compile error😂）。但是依然十分感谢达峰以及各位的谅解与支持！~ 在Strikingly的支撑下，我也在不断地成长。 Wow，Hackathon是后话啦，开发了一个微信小程序与支付宝小程序的工具，等我写好技术博文，就放出链接。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"实习","slug":"实习","permalink":"http://www.noddl.me/tags/实习/"}]},{"title":"小题大做的防范","slug":"on-guard","date":"2017-09-16T06:44:00.000Z","updated":"2018-05-05T16:34:28.218Z","comments":true,"path":"2017/09/16/on-guard/","link":"","permalink":"http://www.noddl.me/2017/09/16/on-guard/","excerpt":"有些事情只是很少或者没有人去做罢了，一旦有人去做，就是畅通无阻。当然，以上说的“事情”对于绝大部分的人而言肯定不是什么好事。","text":"有些事情只是很少或者没有人去做罢了，一旦有人去做，就是畅通无阻。当然，以上说的“事情”对于绝大部分的人而言肯定不是什么好事。 上海信号灯7月到10月，我在位于五角场的Strikingly公司实习，每天上下班都要骑着电动车在政修路上往返。还记得大一暑假也是这样顶着烈日在这条被同济人成为“绿色通道”的路上飞驰，只不过当时骑的是自行车。 可能居住在附近，或是与我有同样上下班路线的人会知道，在政修路与内环高架路有一个十字路口，红绿灯留给行人与非机动车通过的时间只有短短20秒。我发现有人很多人因为等待不了超过一百多秒的红灯时间，而选择闯红灯。一步三回头式地紧张闯过红灯。 但是我发现这样往往很安全，可能很多人会反驳我说：“啊 为什么闯红灯会是一件安全的事情呢？” 那我们先不提那些闯红灯人的姿态，我们先来回忆一下如果是绿灯，而且是顺通无阻的情况下（并非停下等待后出发），这种情况下你身边的路人是怎么做的呢？ 大多都是以保持原速或是略有减速的情况下通过的吧？尤其是在绿灯变黄灯的过渡时间，车速可能甚至还会往上提一提。恰恰在这个时间，相邻的车道交通信号灯变为了绿色，而你的是黄灯或是已是红灯，双方在十字路口相遇，最终肉包铁的上了天，铁包肉的蹲了牢子。 那么我见过的闯红灯的人又是怎么做的呢？他们明知道对面是绿灯，而且很可能会有车驶来，于是在属于自己的安全路口就停下东张西望，确保在自己通过路口的时间内没有车，再慢慢通过。 当然我这个例子是非常不具备说服力的，只是我对我身边的观察而有感而发。我只是想说：不要以为是绿灯就畅通无阻了，不要以为遵守了交通信号就可以高枕无忧了。陷入对规则的无限信任从而放松了警惕而带来的危险性，还不如那些闯红灯的人。 上海地铁上海地铁有潜规则，是这样的：除了双肩包、拉杆箱以外的东西，一切不用过安检x光机，还有，蛮横的人不用受安检。 我们的城市是非常安全的，虽然没有人天天给你宣传这些，但是你也和我一样是能从骨子里感受到这座城市给我们带来的保护，对吧？ 那些每天早上就开始站在地铁口负责安检的同志，你每天都会看见他们，他们在工作，你就知道地铁通道里是安全的。只要你看见牛奶上有贴着绿色标识，受到了协会的认可，你就知道你所喝的牛奶是有保障的。 我们相信着这座城市，相信它能给我们带来保障。但是它确确实实有一些地方依然没有做到完美，我一开始以为是管理上不可避免的缺失，后来才渐渐意识到，不是的。 投入更多的人力物力去做到万无一失，与不如就高速发展，等到有能力了，再去解决这些次要的，低概率的问题。这是我们的策略，这是我们这个时代的策略。 我认为，陷入很深的安全感之中，一旦低概率事件发生，那么将会非常可怕。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.noddl.me/tags/随笔/"}]},{"title":"装病怪谈","slug":"malinger","date":"2017-09-14T02:50:40.000Z","updated":"2018-03-18T12:00:54.000Z","comments":true,"path":"2017/09/14/malinger/","link":"","permalink":"http://www.noddl.me/2017/09/14/malinger/","excerpt":"当然，我不是在装病，我是在进行一场经过精心筹备的演出。","text":"当然，我不是在装病，我是在进行一场经过精心筹备的演出。 要问我在初中究竟学到了些什么 莫过于集请假大法于一体 毕竟社会需要多功能复合型人才嘛初中请假机制极其苛刻 小打小闹都瞒不过老师 事假一般不批 从而习得一身装病奇术 应对一般老师 口水化痰这招绰绰有余 再配上几声湿湿的咳嗽 可谓惟妙惟肖 栩栩如生 此招经过我的推广 在班里早已烂大街 智者不应与之共伍 装病要诀在一个“诚“字 患者的痛苦不仅由嘴上说出 更要写在脸上 表演开始之前忌体育运动 更大讳饱餐烂食 在此基础上再配合清水洗面 浓涂防晒霜于小脸蛋 彩排三番 举止轻柔 静若处子 为的是骗人骗己 演出筹备关键在掌握病理 我所创立的几大奇招皆建立在发生的事实上 即 我以前得过这种病或类似的病 化屎为稀术 便是其中最为典型的例子 腹中之物与脑中之疾 皆不可视 是最好的病因说辞 稀自昨日始 如厕至今已有六七 今早病情最甚 吃红见红 食绿拉绿 虽自备急药 却效果平平 如今以绝食为招 故腹中无物 症状略退 吾已食药甚多 又以养息为辅 验血无恙之因或出于此 恐日后隐患于学业 望赐病假条 &gt; 班上的某方姓同学清楚地了解到自己易上火的体质 在决定要请假回家打游戏后 毅然选择在小卖部当场吞下十包辣条 果不其然 他如愿以偿 只是花去了医疗费 从此辣条封喉一术成为他毕生绝学 但这种招数被我所不齿 为何 装病请假同样讲究一个“装”字 真的有办法搞生病 目地虽已达到 却又得不偿失了 到了时机成熟时 观众到场 演员就位 演出进行 语速放慢 放慢再放慢 但千万别结巴 目光如炬 紧盯老师双眼 真诚而又无助 若是老师无动于衷 俨然一副看透你的老司机模样 莫慌张 只需静静等待不必张口 大艺术家言多也有失 沉寂几个世纪后 老师终于缓缓开声 无非 你何病 病几何 病假条何在 好个“三何”攻势 可惜你已将套路烂记于心 滔滔昨日所学病理 谈谈病患之苦痛 有气无力 却不矫揉造作 使自己成为心有力于学习而力不足的悲怆斗士 抒发自己近日所受的病魔缠身之创 同样 别忘了时不时展示一下你的小白脸 装了几十次病 以为自己天下无敌 心高气傲 在请假界目中无人 若诸君心中起了此念 不妨抽空问问班上成绩第一的同学是如何请假的 “老师，我想回家洗澡。” “好，你家在哪，老师送你回去。”","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.noddl.me/tags/生活/"}]},{"title":"Oracle填坑 - 安装","slug":"oracle-install","date":"2017-04-06T13:53:00.000Z","updated":"2018-03-18T11:53:47.000Z","comments":true,"path":"2017/04/06/oracle-install/","link":"","permalink":"http://www.noddl.me/2017/04/06/oracle-install/","excerpt":"17年软件学院有一门课程，指定要学生使用oracle数据库作为项目开发使用。那么oracle在安装的时候究竟有哪些坑呢。","text":"17年软件学院有一门课程，指定要学生使用oracle数据库作为项目开发使用。那么oracle在安装的时候究竟有哪些坑呢。 首先我们要有一个Windows server主机，腾讯云就可以申请到。于是我们根据分配的公网IP地址远程登录上去。登录完成界面是这样的(2012RC) 打开普通的IE浏览器，然后接受来自同济大学的小邱神的加速下载助攻: oracle下载。下载地址随时都可能会失效，流量挺烧的，各位答应我，给他捐款好吗？ 运气好的孩子会获得这两个zip压缩包(oracle1, oracle2)。它们里面都有一个叫database的目录，请分别解压出来，然后合并成一个database目录(如果你还没看懂并且很巧地做错了，那么接下的安装你一定不会成功)。 我们进入database目录，可以看见这番光景。 运行setup.exe进入安装程序。有一个小黑框别理它，之后的步骤请静下心平静地跟我一步步走完。千万别忙着等下一步哦，先去把计算机名给改了，起码不能有下划线等等一些特殊的字符。教你怎么改计算机名的任务我就委托给google吧。改好了以后，我们进入下一步(其实要先重启一下才行) 点击下一步，然后你就会进入漫长的，可能长达半小时的等待中。这个时候鼠标不要动点西点，否则你会搞砸接下来的所有事情。这个时候你可以泡个茶看个剧，静静等待它进入下一步。 按照我的印象(因为我写博客的时候实在懒得等30分钟)，应该是配置全局数据库以及添加新账户了。选择第二个添加新用户，账户名与密码(复杂点)自己定。全局数据库名就叫orcl不要去改它了，密码最好跟刚刚的账户密码保持一致。然后就可以一直点下一步了，如果卡着了就等着。 然后oracle安装程序会进行安装前的最后检查，如果你的内存&lt;=1G，它会报一个warning，别理会它，直接点右上角的全部忽略然后进入安装步骤。安装这个过程会持续很长时间，并且会伴随一系列的错误发生(你没有仔细看前面教程的苦果)，所以你最好盯着。错误了以后就回过头仔细看看有没有哪里没做对，如果安装成功该程序应该就关闭了。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://www.noddl.me/tags/oracle/"},{"name":"database","slug":"database","permalink":"http://www.noddl.me/tags/database/"}]},{"title":"极限优化js加载阻塞","slug":"script","date":"2017-03-12T03:01:00.000Z","updated":"2018-03-18T12:01:03.000Z","comments":true,"path":"2017/03/12/script/","link":"","permalink":"http://www.noddl.me/2017/03/12/script/","excerpt":"万年被提起的老题：”同学，浏览器是如何加载一个页面哒？”好吧，你要我从浏览器识别URL到DNS(各种机制)获取真实IP说起呢？还是从建立TCP连接(各种繁琐的特性以及与UDP的区别)到web服务器处理GET请求说起呢？其实我今天要到特别说的是，从服务器发回index.html，浏览器获取到html数据那一刻开始。大部分浏览器是如何做的。","text":"万年被提起的老题：”同学，浏览器是如何加载一个页面哒？”好吧，你要我从浏览器识别URL到DNS(各种机制)获取真实IP说起呢？还是从建立TCP连接(各种繁琐的特性以及与UDP的区别)到web服务器处理GET请求说起呢？其实我今天要到特别说的是，从服务器发回index.html，浏览器获取到html数据那一刻开始。大部分浏览器是如何做的。 我知道你肯定会说DOM树什么的别先急着说浏览器会建立DOM树，不过我今天也肯定不是来普及什么是DOM树(Document Object Model)的。但是也不能随随便便说: 啊~浏览器建立DOM树，DOM树建立好了，DOMContentLoaded事件触发啦，document is ready。 思考：如果你做一个浏览器解析DOM的程序，会怎么做呢？ 当然是建立树结构，&lt;html&gt;标签为根，然后递归创建子节点等等等等。这很nice，起码你不会对此表示茫然。 我们假设你的程序解析到了&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://www.example.com/main.css&quot; /&gt;这个标签，你的程序发现这个样式表是要从互联网(其他网站)中加载的，聪明的你肯定早就想到了这种情况，于是你就让浏览器开始下载这个样式表。这个时候问题来了！ 浏览器下载这个样式表的时候，我们之前DOM解析工作要不要继续进行下去呢？但是简单一想，能并行就并行处理任务嘛，这样我们DOM解析工作能不会被阻塞了喵。于是你让浏览器新开了一个线程来负责样式表下载工作，而负责DOM解析的老线程继续进行下去了。 该死的script标签接下去的工作很顺利喵，一路都是普通的例如p div section的DOM节点，畅通无阻。突然！你发现了一个该死的script标签(因为做浏览器的同胞都说它很该死)。老样子，script标签长成了这个熊样子：&lt;script src=&quot;http://www.example.com/main.js&quot; /&gt;，你要去互联网(其他网站)加载这个js。 哈哈太简单了，我开一个新的线程让它去加载这个js就好了啦，根本不妨碍我解析剩下的DOM。但是你有没有想过：js代码可能会修改DOM(如果你写过前端逻辑的话)，如果在JavaScript执行的同时还继续进行页面的解析，那么整个解析过程将变得难以控制，解析出错的可能也变得很大。 你冷静地思考了一下: js代码执行会影响DOM这点没错，但是我先下载，不执行总没问题吧？。太棒了，async属性就是为你量身定做的，现代浏览器也考虑到了这一点，所以支持了async attribute，&lt;script src=&quot;http://www.example.com/main.js&quot; async /&gt;这样就可以让js下载与DOM解析并行啦。但是实时上，你有没有考虑过：“既然是异步，下载完毕后，各个js执行的前后顺序是怎么样的呢？”没错，如果使用async特性，那么js的执行顺序将无法被保证。比如的你写的main.js依赖jquery，如果你的main.js也被加载成功了，而此时jquery没有被加载完成，Boom 报错！。(当然，我们可以使用一些AMD loader来解决这个问题) Async真的是async吗使用了async特性的你，让DOM解析工作进行到了最后。但是，真的是这样吗？这里存在一些情况： 某个js文件在DOM解析完成之前也下载好了，那么它将被执行 DOM解析完毕，js文件一个个被下载好，执行它们 第二种情况是你最希望看见的，而第一种情况你也无法避免：js文件执行会阻塞DOM解析工作(原因之前讲过)。所以需要指出，异步加载js文件，并不是异步执行js文件，一旦js文件加载完毕，就会执行并且阻塞DOM解析。阻塞了DOM解析意味着后续的layout、paint工作也就延缓了。 可以轻易地从图中看出，即使加了async，js文件被异步下载，但仍然摆脱不了阻塞DOM解析的命运（如果你的js文件在DOM解析完成之前下载完毕的话）。 我要极限优化，拒绝白屏我观察了目前网上的一些资料，几乎都是提到js下载过程中导致的DOM解析阻塞，而丝毫不提js在执行导致的阻塞。为什么呢？因为与下载所耗费的时间比起来，解析那一点点时间根本不算什么。 如果你是一个前端优化的极限狂，那么你就要意识到js执行导致的DOM解析阻塞（两种情况的第一种），从而使后续的layout、paint工作延缓，出现白屏这一个问题。 解决方案：首先要明确一点，我今天不是来教大家写AMD loader的。 我们思考一下，js执行会阻塞DOM解析，那么是不是意味着部分浏览器将他们放在了同一个线程里呢？如果我们能将js执行工作放在DOM解析工作之后就好了。那么你了解js的异步的实现以及任务队列原理吗？ok，我今天不提这个，我们尝试使用setTimeout(mainFunction, 0)将这个js文件执行代码加入任务队列，如果没错的话，它的优先级应该在DOM解析之下。 大功告成，经过多次试验，浏览器确实不会因为js的执行而出现过长的白屏时间啦！ 拓展： 你问我知不知道defer？区别是什么呢？","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.noddl.me/tags/前端/"},{"name":"javascript","slug":"javascript","permalink":"http://www.noddl.me/tags/javascript/"}]},{"title":"序","slug":"preface","date":"2017-02-23T15:46:00.000Z","updated":"2018-03-18T12:00:44.000Z","comments":true,"path":"2017/02/23/preface/","link":"","permalink":"http://www.noddl.me/2017/02/23/preface/","excerpt":"早在两年前，我刚上大学不久时，就承诺母亲要写篇文字，来作为前十年所写文章的序。我如今尚未成为名人大家，所写文章欣赏之人也是寥寥无几，自然的，序也肯定只能由自己来写。","text":"早在两年前，我刚上大学不久时，就承诺母亲要写篇文字，来作为前十年所写文章的序。我如今尚未成为名人大家，所写文章欣赏之人也是寥寥无几，自然的，序也肯定只能由自己来写。 仔细剖析了一番，拖这么久的原因其实是没有勇气对之前所写的文字做一个总结。这一篇篇文章，有些甚至字数少到能一眼就读完，但是都像是自己一步步的脚印，那些白纸黑字记录着当时的所见所想。我找不到合适的语言去描述自己的那些影子，那些是透过文字折射出的自己。这些年来只顾着一味地前进，几乎没有多出的时间来回头看看自己曾经的模样，以至于时间一长，甚至到了害怕回眸的地步。 课本以外的诗背得真不比同龄人多，而且我还擅长健忘此类的文字。但是关于那首少年不知愁滋味，从初二瞥过的那一眼起，我便再也没有忘记过。“少年不识愁滋味，爱上层楼，爱上层楼，为赋新词强说愁。而今识得愁滋味，欲说还休，欲说还休，却道天凉好个秋。”当时我认定辛弃疾写的是我，在讲述我在写作方面的思绪。正如在我这些文章里，无病呻吟的文风且不多，但是积极向上的正能量文章还真的没有。当时可谓是“未曾经历过真正的沧桑，却失守了最后一点年少意气”了吧。所幸的是没有老师或同学如是将我批判一番，他们只会说：周以恒，你写的作文太苍白了。 这些文章，开心时写下的，滴着眼泪写下的，考试时奋笔疾书写下的，甚至是在厕所里为了赶作业写下的，都是我的珍宝。如今，我只想将它们献给两个人。一个是我的母亲，她值得拥有我文章里全部的回忆，也只有她才配得上去理解我的所感所写。我并不会说些什么诸如“感谢母亲的养育之恩”的腔调，我将这里一切的文字统统交给了她，是因为她是作为一个朋友，看着我的成长，辅佐着我的进步，我所写的每一个笔画，可谓是都带有她诤友般的理解与包容。突然想起她与我说的最多的话，除了”妈妈爱你”之外，应该就是”我们两个是好朋友呀”了吧。 第二个人，毫无疑问的是我自己。这么多年下来，一路拼搏，结果或好或差，都是自己选择的道路。在坚持不下去的时候，或是在再次怀揣着梦想的时候，都有自己的声音在脑海里回荡：“再坚持一会儿”亦或是“管他的，放弃吧”。感谢自己能在前十年的各个阶段里，或多或少留下了一些能够唤起回忆的文字。让我在不断前进时，能够有幸回头看看自己以前那些青涩的模样，从那个用拼音代替不会写的字的小学生，到那个为了拼凑八百字应试作文而满头大汗的初中生，再到时时刻刻渴望抒发自己个性、激扬文字的高中生。还是与家人出游、烦心事等等，几乎都有记录。唯一略有遗憾的是，我并没有写日记的习惯，不然回忆说不定还能再多一些。 我人生中的第一个十年，是在一个小镇里度过的。他没有赋予我洞悉人心冷暖的慧眼，他也没有教我如何去阿谀去争雄。小镇在我的记忆里，永远像是一个避风港，没有激勇的暗流，也掀不起波澜。在之后的十年中，因为缺少必要的谋略落后于他人时，我曾暗暗在心内埋怨过小镇不曾教过我高深的为人处世之道。然而每当此时，当我从异乡疲惫地回到小镇里，他却笑着告诉我，隔壁的小孩子又被街头那条老狗吓得哇哇大哭，常去的水库里的水前几天被抽干后露出了光秃秃的峭壁，或是后山的梯田中的油菜花开了，漫山遍野就像是这美好盛世。可能他不曾言语任何有关于外面的世界，可他又真真切切地驻守在我的思绪里一直展开着怀抱，让我清楚地知道在远方的某个地方，有一扇门永远为我敞开，而他则会在我归家时，递上一只松果，眯着眼说：“瞧，刚刚啃过它的松鼠，尾巴亮黄地像是油漆里浸泡过的一样。” 第二个十年过得最为坎坷，也正如文章中所透出的挣扎与徘徊一样。我渴望回到舒适的环境，却又不愿落于人后，身后的荣誉与我远去，身前却又是茫然一片。遇到了一些奇奇怪怪的人和事，他们皆与我之前的世界不同，我看不破他们想做些什么，也想不清楚自己应该做些什么，因此我接连碰壁，跌入谷底。每当能够见到曙光的时候，我就写下一篇文章来记录这难得的好消息。所以这一时期的文章不是在糖罐中缔造的，而是在痛苦中催生的药后冰糖，这个时期的文章或多或少都见证了我当时的彷徨与无奈。 有些人只明白人生就像是一本八九十页的短篇小说，翻过了就没有再翻回头的道理，所以他们写下鸡汤，所以他们告诫年轻人要懂得珍惜。他们除了时光给予的皱褶以外，其余什么都没有留下，我不希望自己成为那种人。我不光要将人生这本书体验地淋漓尽致，还要写下最美的诗篇，来记录自己曾经的鲁莽冲动，让自己在最后几页时光中，不是凭着一把破伞、一口快掉光的黄牙，来空述自己年轻时的林林总总。此书便是为此目的而存在于世的，或者说，此书就是我人生的一个缩影。 2017-02-23 23:46","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.noddl.me/tags/生活/"}]},{"title":"webhook革命 使用fish-hook自动部署多个应用","slug":"fish_hook","date":"2017-02-21T05:00:00.000Z","updated":"2018-03-18T11:54:42.000Z","comments":true,"path":"2017/02/21/fish_hook/","link":"","permalink":"http://www.noddl.me/2017/02/21/fish_hook/","excerpt":"一站式高效管理你多个github webhook.Github地址: https://github.com/dcalsky/fish-hook","text":"一站式高效管理你多个github webhook.Github地址: https://github.com/dcalsky/fish-hook 背景等你辛苦建立好了静态博客，却依然要忍受每次本地更新后，还要ssh到远程重新git pull一遍的痛苦。 当你终于用webhook handler写了一堆代码来解决这个应用的部署问题后，你依然发现，还有许许多多的项目等着你为它们写部署代码。 要是有一个集成化的工具，在一个目录里帮我管理所有的webhook就好了！fish-hook就是为此诞生的，它最大的特色就是：极力缩短开发者花在配置上的时间，约定大于配置。 开始使用安装安装python3.5或更高版本，再用pip包管理工具安装fish-hook1$ pip3 install fish-hook 新建fish-hook目录1$ fish-hook init ssh进入远程主机后，运行该命令，并且设置一个通用的端口，例如: 2333。这样就创建了名为fish的目录，这是控制所有webhook的总目录。$ cd fish进入该目录。 接收端: 为一个仓库创建webhook1$ fish-hook new 假如你在github上开通了一个名为blog的仓库，并且打算为其开通webhook来实现自动部署。那么就输入blog以及你要为此webhook设定的密钥。完成后，blog的webhook接收端就部署好了。 发送端: 在github上创建webhook首先打开仓库的github设置页面，然后创建github webhook，填入基本信息。可以注意到Payload URL这一栏，前面的IP地址就是你远程主机的外网IP地址，之后是你刚刚设置的端口，斜杆后就是blog目录，与接收端的名字相同。密钥一栏当然也要与在fish-hook上设置的相同。 设置接受push事件后的动作假设你使用git push推送了新的内容到blog仓库，如何执行特定的shell脚本呢？此时的fish-hook目录是这样的:12345fish/ config.json blog/ app_config.json push.sh 为什么有一个push.sh文件呢？就这意味着，当你仓库接受新的push事件后，fish-hook就会运行push.sh这个shell脚本，里面的内容完全可以自己设置。 这就是所谓的约定大于配置，webhook接受到什么样的命令，就会运行相同名字的shell脚本，当然前提是你的目录里要存在这个脚本。 上线1$ fish-hook server fish-hook为你封装了部署所需的web server。一条命令即可启动，此时所有的webhook都会被启用。 开启2333端口centos默认开启了端口防火墙，如果你使用了一些具备安全组的云主机服务，也需要开放所有安全组哦。1$ sudo firewall-cmd --zone=public --add-port=2333/tcp --permanent 生产环境使用Screen1$ screen -d -m fish-hook server 在fish-hook主目录运行该命令，即可使fish-hook server持久运行下去。 webhook 事件们events 更多帮助请查看github仓库fish-hook","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"github","slug":"github","permalink":"http://www.noddl.me/tags/github/"},{"name":"部署","slug":"部署","permalink":"http://www.noddl.me/tags/部署/"},{"name":"python","slug":"python","permalink":"http://www.noddl.me/tags/python/"},{"name":"webhook","slug":"webhook","permalink":"http://www.noddl.me/tags/webhook/"}]},{"title":"Django rest framework 部分最佳实践","slug":"django-rest-framework","date":"2017-02-08T15:55:00.000Z","updated":"2018-03-18T11:56:38.000Z","comments":true,"path":"2017/02/08/django-rest-framework/","link":"","permalink":"http://www.noddl.me/2017/02/08/django-rest-framework/","excerpt":"DRF是我超喜欢的一款基于Django而创建的Restful API框架，项目开发效率大有提升。我来谈谈在使用DRF的过程中，有哪些最佳实践。","text":"DRF是我超喜欢的一款基于Django而创建的Restful API框架，项目开发效率大有提升。我来谈谈在使用DRF的过程中，有哪些最佳实践。 序列化 Serializeserialize这个名词也是在接触后Django rest framework后认识的，因为在很多web框架里都比较少用到，所以对其概念比较模糊。那么它到底是什么，又能为我们做些什么呢？ 在前端jQuery库中，有一个.serialize()的方法，它不接受任何参数。用例如下: 1234$( \"form\" ).on( \"submit\", function( event ) &#123; event.preventDefault(); console.log( $( this ).serialize() );&#125;); 效果: 从图中可以看出，此方法是将form表单抽象的数据规范化，以某格式化文本的方式表达出来了（图中为query string方式）。 回到django，serializer的主要作用就是将model.py中建立的一个个抽象class的python原生实例转换为json或者xml的表达方式。太绕口了是吗？简而言之，从request获取client传来的数据，这些数据肯定是dict, tuple等众多数据类型，类型不统一。你可以将这些数据传入serializer中，它来负责帮你验证数据合法性、转换为json or xml格式的数据，甚至是直接帮你完成后续。 当初在学习的时候，我依然不了解我为什么需要serializer，我觉得django原生的开发效率反而更高，不需要去创建那些乱七八糟的serializers.py，甚至是将model里面的数据再在serializer里面重新写一遍。 但在深入了解rest framework工程化思想后，之前自己的想法显然naive了！首先：serializer提供了更多的数据验证方式，比如model里面没有的min_length、UniqueValidator, write_only。 当你真正开始写项目的时候，你就会知道，这些django原生里面都是没有自带的。需要在Model里手动创建类方法来判断request数据的合法性，以及痛苦地写着错误处理，再以json response返回给客户端。 如果你是一名后端开发的新手，一开始你写着一个个错误处理会觉得十分有成就感，感觉自己的程序又完善了几分。但是到后来你就会被庞大的json response或是try except等等淹没，并且面对着许多错误提示文本重复的问题（当然你也可以建立错误处理模块来减轻这种伤害）。 然后你再回头就可以看见serializer是多么的方便。如果这样仍然不足以打动你，对嘛，一个验证数据的功能而已。那么视图也许能够打动你，如果你已经拥有一个简单的serializer，在view中引入后，就能直接进行api操作，无需再自行处理诸如get、post、put等请求方法，你也知道为了处理这些，if语句可是需要写很多的。当然，这个功能需要配合viewset或是class view来实现。 讲了这么多，那么serializer到底长什么样呢？ 我们自己建立的serializer类可以继承自两个rest framwork自带的类，具体有什么区别自行查阅文档。 username、password是我们注册时必要填写的两个field，所以我们当作类属性写在开头。 class Meta里面有两个属性，model当然是这个serializer属于哪个Model了，fields是设置我们需要这个Model里的哪些属性需要序列化的。你如果懒得一个个写，直接写&#39;__all__&#39;就行啦。 之后的直接的类方法，比如validate、create就是一个serializer在生命周期需要做的动作，你当然可以override它们，写上自己需要的功能。api文档里面写的都非常详细，我极力推荐你去看看。 视图 Api viewCRUD根据model建立好serializer，接下来我们就可以开始构建视图了。views.py 其实关于views的最佳实践，我目前只是探索到generics与mixins，而最为玄学的viewset没来得及去探索。但是对于一般的功能，这两个足够了。 现在我提出两个需求： 对User的CRUD； 判断username是否已经被占用。 既然存在CRUD，我们就需要使用rest_framework.generics了。首先引入这个模块，之后对我们的需求进行判断。我们需要：1、能够查看所有的user，2、查看单个user的具体资料，3、创建一个用户（注册），4、修改、删除一个特定的用户。 我们将1、3列为一组，2、4为一组。为什么呢？因为第一组都是针对用户组（未特指某用户）而言的，\b而第二组是针对某一特定用户的。 于是我们构建这两个类: serializer_class为我们视图是对应哪个序列化而进行操作的，queryset需要得到Model的所有成员。然后呢？没了，第一个需求基本就做完了。 ListCreateAPIView封装了三种mode：列出所有User、创建一个User、生成API视图。 那同理：RetrieveUpdateAPIView就封装了查看特定User，修改特定User等动作。 我们在urls.py里引入。 于是我们的第一个需求就做完了。我们访问localhost:8000/users就可以看见django-rest-framework为我们创建基本界面。 单独功能我们还剩下一个检查用户名是否已经被注册的需求没有实现，简单分析一下：这里并没有对User资源进行CUD操作，只有read(GET)操作，而且也并非正规地查阅User实例的信息。所以不能使用rest framework帮我们封装的CRUD视图。 那么我们可以将URL设计成example.com/users//check，然后传入需要进行查询的username就行了。那么在view里又该如何去做呢？利用一些装饰器来实现控制Request method与Permission管理。这里我们只支持get请求，并且规定所有人（无论登录与否）都可以调用这一接口。引入它们:from rest_framework.decorators import api_view, permission_classes 然后我们根据url传入的username，使用Django自带的User Model来进行用户名是否存在的检查，Response也是rest framework为我们提供的序列化的返回响应方法，还可以附带data与status。 from rest_framework.response import Response这样就可以引入它了。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"django","slug":"django","permalink":"http://www.noddl.me/tags/django/"},{"name":"django-rest-framework","slug":"django-rest-framework","permalink":"http://www.noddl.me/tags/django-rest-framework/"},{"name":"serializer","slug":"serializer","permalink":"http://www.noddl.me/tags/serializer/"}]},{"title":"夏天到的时候，我有一堆话要讲","slug":"summer_note","date":"2016-06-06T04:00:00.000Z","updated":"2018-03-18T11:56:48.000Z","comments":true,"path":"2016/06/06/summer_note/","link":"","permalink":"http://www.noddl.me/2016/06/06/summer_note/","excerpt":"生在八月，就注定是夏天的孩子。","text":"生在八月，就注定是夏天的孩子。 游戏、游戏、游戏和最后一天写的暑假作业构成的暑假。记忆中的酷暑总是伴随着台风一起来临，如果外出，尘土的气息就会扑面而来。叽叽喳喳的知了叫声会被孩子逃窜的尖叫覆盖，家里老旧的玻璃窗，在强风吹动下，发出咯咯的颤动声，然后挂在外头的风铃只响了一会儿，倾盆般的阵雨就哗啦啦地来了。 却也年年如此，都没有新意。 那个时候我也像现在这样无所事事，尽管堆了一桌子的作业本，就算期末考试成绩依然倒数。已经不记得说好的假期要好好努力的信誓旦旦了，初中和高中，拖到最后一天根本不可能完成的作业，什么回忆都没有留下的夏季，年复一年，更加没有新意。 不过我倒是对某段时期的夏天印象极度深刻，就像是方方正正糖果店里特意被挑出的奇形怪状棉花糖似的，是关于小学的，那个时候我和他们都还没真真切切体会到什么叫无趣。 家里的大人忙着上班，都顾不上与小孩子分享这个夏季。我早上就沿着那条笔直的上坡，搭母亲的便车到奶奶家，一个被山和围墙环绕着的县府。细细一想，我真的没有足够的语言功底来描述好当时我们玩耍的区域，以及所见到的景色，现在只是单纯觉得很美好罢了。 在县府的深处，那个水井边，有一条通往后山的小道，路边种满了松树和长着叫不上名的植物。到了夏末的时候，地上就会出现大大小小的松果，那些是被机灵的松鼠精挑细选后留下的。上蹿下跳的松鼠在我们捡起它们不要的松果时，眼睛依然还会紧紧盯着，就像是一个个古典的守财奴，不愿放弃那些明明没用的财物。风吹过的时候，摇晃的狗尾巴草就会格外显眼，摘下一根用来挠挠小伙伴的脖子，这是当时我对它存在价值的唯一认知。 路边会有大大小小被杂草和残破的树枝虚掩起来的洞坑，听大人说那里面有蛇或是野猪。胆小却充满好奇心的我们，也只敢在远处扔扔石头和捡来的松果，探探虚实。无一例外，没一次有东西从里面出来。 也不知道朝里面扔了多少次石头和松果，仿佛就这样一天天一年年地重复相似的动作，一次次满足自己那小小的好奇心，当初一起扔东西的小伙伴，不知如今还记得不记得当时尖叫着，大声嚷嚷着:”野猪快出来，我们不怕你…” 后山的那条小道，弯弯曲曲，在经过野猪洞、农田等一系列场景后，最终会通往水库，那是夏天避暑游泳的好去处。但是我有一种奇怪感觉，就是过了后山的山顶，仿佛就不再是身处我们的地盘了。会不会是因为见到了山顶后面其他的孩子们，或者是比较去的次数比较少的原因呢。 关于那些捡来的松果，我们会很认真地筛选干燥的交给爷爷奶奶，在得到认可和夸奖之后，继续开始其实已经了然于胸的冒险。 不得不提的是，我有一把属于自己的小锄头。在路边将其他地方带来的小花随随便便移植上去，浇上一点水，用手和锄头填上泥土，隔几天就去看望它一次。下雨的时候，我和弟弟妹妹就冒雨去给它打伞，谈论着些只属于小孩子的事情，那个时候我们不谈论未来，明年，甚至是下周。 初中时的冬天，我躺在冰冷的床上，失眠听着外面呼啸的寒风以及室友的呼噜声，我十分在乎此时此刻的失眠会不会给明天的考试带来影响，尽管我的成绩在一些人眼里已经到了不需要在乎的程度。我幻想着能考好些给家长一个说过得去的交待。一个小小的没底气的期望将曾经的美好与现实的惨淡相对比，碰撞出无限悲怆的火花，然后熄灭在零度上下的气温中。我就是为什么我在不幸福的时候不愿去提及那些美好的事情，例如童年。 我的小聪明总是在开学交作业的时候能发挥到极致，运气好的时候能偷偷逃掉一两本作业的收取。运气差的时候只能疯狂恶补作业，字迹潦草，笔尖火花四溅。我没空抬头看那些同学交完作业欢脱聊天的样子，我不关心他们是怎么完成那些精美的作业的，因为再不抓紧的话一周之内我都无法欢脱起来。老师将一些经常偷税漏税的同学格外对待这点我非常清楚，所以我具备足够的洞察力以及圆谎能力，作业在家里、封面换皮、重复上交、将其他同学的名字改成自己，这些都是惯用套路，屡试不爽，但是主要看时机。现在我已经生疏了，在过去我可能会骄傲却又自卑地教你们两招，然后听你们不屑地夸奖。 作一个半差生真的好难，身份上我习惯将自己成为中等生、后进生，其实我就是差生，但是到现在我居然都不愿意承认。不一样的是，我对每一次考试都足够的重视，我对每一次成绩都卯足了劲地感到悲哀。在当时，如果我又一次考砸了，别再责备我了，我内心就已经很难受了，我想回家，不明白住校的意义何在，作为消费者交了学费，我却被承包了寝室3年的厕所活儿。成绩比我好，比我壮的同学，他们把屎拉出了蹲坑，最起码，我有限的力气与老师们是不会站在我这边的。 抱怨的话不能多说了，起码现在我过得不差。主要你没见过我过去其实是一只丑兮兮的毛毛虫。 冷气、冰拿铁、蝉鸣和奇妙能力歌构成的Summer。首先感谢 @一折 学长介绍了这份来自flipChinese负责前端开发的实习工作。首先不谈报酬、工作强度如何，工作地点就在学校附近的五角场，并且是在一家咖啡厅里面。所以有时候工作轻松的时候，我的状态就是点一杯冰水加双份冰块，坐在距离空调最近的位置上，屁股深深陷入沙发里，安逸地打开笔记本插上耳机写代码。 偶尔会有路演在这里举行，大家都抱着干出一番大事业的目的来听的，他们有的是投资人，投的是除了满腔热情一无所有的点子人（我没在黑他们）等等。坐在一张张小椅子上聚精会神地听台上标准不标准的普通话，认认真真地提出问题，我从初中结束之后就没有感受过这种氛围了。 123只有我和我的单车先生在午后拿铁混着js喝和暴雨一起看着地上嗤嗤的气泡 那时候写的小诗，是当时情况的真实写照，炎热的夏季早上睡到自然醒然后洗洗涮涮，到学校边上的全家买一个新奥尔良鸡腿包、一个奶黄包以及一杯豆浆。从高中我就开始喜欢每天吃同样的早餐，只要没有更好的选择，也不怕吃腻，永远选择一样的：粽子+实心馒头。买完早餐也完全不急，坐在全家店里安安静静地全部吃完，抹抹嘴角再骑上门口的单车前往五角场。那个时候太阳还没有完全升起来，还温柔地面对我们的水泥森林。 为此，当时又写了一首小诗： 123如果在关门的时候挂上耳机那么在吃奥尔良鸡腿包的第二口听到的应该是张震岳的再见 到饭点的时候会和大家商量今天到底是吃外卖还是一起去外面吃，如果是去外面吃，一般是吃面的。复旦门口开着一些面店味道实在比同济周边的要好很多，关键是给人一种干净卫生的感觉。偶尔会和老板单独一起吃面，聊聊工资和公司的事情，充实自己的知识库，拓展姿势。在旁边的杂货铺买一瓶饮料，再在回去的路上，故意慢慢走磨时间到1点，COCO的现磨拿铁咖啡开始打半折了，他们家的咖啡可惜上半部分味道十足，下半部分就如同直饮水一般，毫无味道。 外卖的速度实在令人吐槽万分，基本是快到1点半的时候才会送到。大家都羡慕我点的价廉物美的炸鸡腿饭，嚷嚷着说下次一定要点，然后在下次点外卖的时候又忘记。午餐时间在办公桌上用我的电脑开启一部电脑，常常只是刚看一个开头，饭就吃完了，老板自己虽然也很想接着看下去，但是还是不舍地催大家开始工作。 这就是我们的午休，没有人抱怨，一切在当时看来都是那么幸福呢。突然有一天COCO的店员告诉我咖啡打折的日期过了，我才恍惚想起，已经是八月中旬了呢，实习的生活也似乎走到拿铁的下半部分了吧。 我开始盘算着工资给妈妈换一个新的ipad，开始计划着下学期，开始憧憬未来的生活。在这个幸福的时刻，我照样也没有想起曾经的自己是多么地不在乎明天，仿佛一切都还远着，爸爸承诺考上大学就给我买一台属于自己的电脑似乎就在昨天。 然而，我确确实实作为一名大学生站在了校门口的十字路口上。拍下了一张照片，纪念那个夏季，我的收获与逝去。 1234傍晚刻意从不顺路的正门走以为这样就能揪住去年八月的尾巴像个新生一样，故作镇定。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[]},{"title":"Cocos2d-x之物理引擎","slug":"cocos2dx_physics_engine","date":"2016-05-19T15:30:00.000Z","updated":"2018-03-18T11:57:02.000Z","comments":true,"path":"2016/05/19/cocos2dx_physics_engine/","link":"","permalink":"http://www.noddl.me/2016/05/19/cocos2dx_physics_engine/","excerpt":"我连什么是重力都不懂，却让我开始用物理引擎。","text":"我连什么是重力都不懂，却让我开始用物理引擎。 一切故事发生的背景之前写了一篇cocos2d-x关于键盘按住事件的教程，不足之处还请大家多多指出。 在自己做练习的过程中，逐渐接触到了碰撞，行走，降落一类的行为。我发现，如果全部由自己来实现，不仅实现起来复杂，而且执行效率也不一定见得高，所以我决心开始学习cocos2d-x Physics 2D。 物理引擎的基础两种物理引擎根据官方文档的介绍，目前有两大重要的物理引擎， Box2D 和 Chipmunk，并且cocos2d-x已经集成了它们，在3.x版本中可基于Chipmunk的核心API的物理引擎使用。 一句话： cocos2d-x 3.x版本中使用Chipmunk物理引擎更加方便了，大家都升级成3.x吧=。= 为什么要用物理引擎我为什么要用物理引擎？举个开发中遇到的问题，在上一期的博文中，我们成功创建了一个hero sprite（对，就是那个可爱的僵尸）。现在我们要再创建一个坚果墙 sprite，叫做 wall sprite，它的作用是：hero会被wall而无法继续前进。 大家都知道，如果什么都不设置，我们控制hero的时候，是会直接穿过wall sprite的。这肯定不是我们想要的，机智的霄同学就想到了一个办法：获取hero要走的下一步位置（仔细看看上一期，就会发现这并不难），然后再判断这个位置（Point）是不是存在一个精灵，如果是，就强制取消移动命令。 好办法啊，思路清晰，我简直要为他鼓掌了。 方法虽好，可惜我不会。之前提到过，我是一个呆呆呆呆的初学者，我只想用最方便的方式来实现我要的效我甚至不惜牺牲程序的效率来追求减少代码量，一想到要再次封装一大堆，我就烫烫烫。 cocos2d-x physics 2D就可以完美解决这个问题，而且方法十分简单。 存在物理规律的世界？我们这个世界受着来自物理规律的支配，那么物理引擎创建出来的scene也同样要存在某种物理规律，身为造物主的你可以自由定义这些规律。 首先，我们在Demo.cpp中创建一个物理世界。 1234567Scene* Demo::createScene()&#123; auto scene = Scene::createWithPhysics(); auto layer = HelloWorld::create(); scene-&gt;addChild(layer); return scene;&#125; 很简单对吧？只需要将Scene::create改成Scene::createWithPhysics，在这里scene中的物理世界就算创建成功啦。 重新创建sprites上一次教程中，我们创建了一个hero sprite， 创建的方法是这样的： 1auto hero = Sprite::create(\"hero.png\"); 太愚蠢了是不是？高贵的物理世界怎么能这样呢？… 很遗憾，这样的创建方式是没错的，我们依然沿袭这个方法来创建sprite。 如果此时，你开启调试，就会发现sprite没有开始自由落体运动。那到底是哪里出现了问题呢？ 这样创建出来的sprite只是一个空壳而已，它没有任何灵魂和信仰的力量(Physics body)，我们此时需要给这只可怜的小家伙+1s信仰。 12auto heroBody = PhysicsBody::createBox(hero-&gt;getContentSize());hero-&gt;setPhysicsBody(bodyHero); 这样，它拥有了一个Physics body。现在再调试，你就发现我们可爱的hero已经在自由落体了。 可是，你不想听听createBox到底是什么意思吗？body存在一个边界，里面的空间表示sprite的实体。而这个边界有几种存在的形态：矩形、圆形和多边形。 在刚刚的例子中，我们创建了一个矩形的边界，规定了边界范围是hero sprite的大小（png图片）。再说说之后要创建的坚果墙吧，它的形状基本趋近一个圆形，那么则可以使用createCircle的方法来创建它的body. setPhysicsBody顾名思义，就是将我们的灵魂(body)赋给hero sprite. 掉…掉下去了看着我们的hero能够实现自由落体，我也很开心啊。可是…不一会儿，它就掉到屏幕外面去了，怎么办？ 恍然大悟，我们的背景图片（它也是一个sprite，这不能忘啊）,没有被添加body。但是我们又发现一个问题，body是进不去的，所以，物理引擎专门提供了一个方法createEdgeBox，只创建边界。 123456# Demo.cppauto map = Sprite::create(\"background.png\");auto mapFrame = PhysicsBody::createEdgeBox(map-&gt;getContentSize());map-&gt;setPhysicsBody(mapFrame); 再次调试，hero稳稳地落在了地面上。 支配我的世界虽然我不知道什么是G = mg，但是我知道世界上一定是有重力的，嗯。所以我们创建出来的scene中的物体也需要受到重力的作用。看API文档了解到我们需要传入一个Vec2类型的重力参数，第一个和第二个数值是什么意思呢？我通过xcode进行调试发现:第二个数值为默认的重力，98。那么我们就可以通过setGravity方法来设置属于我们自己的重力了。 12345# Demo.cppauto scene = Scene::createWithPhysics();scene-&gt;getPhysicsWorld()-&gt;setGravity(Vec2(0.0f, -500.0f));... 先使用物理scene中的getPhysicsWorld方法来获取我们的物理世界，然后再设置重力，经过调试就可以看见hero sprite和wall sprite飞快地加速下降了。 还有很多好玩的功能强劲的API可以供大家使用，比如getAllBodies，都等着我们去探索。 关系到具体body的属性那么我想为hero sprite和wall sprite添加一些属于他们自己的物理属性，怎么做到呢？ 就像现实世界中有人质量大，有人质量小一样，我要给坚果墙设置一个极大的质量以至于不可动摇，而僵尸（our hero）就可以自由行动（如何自由行动上一期已经说过啦~）。 就像API中所提到的，可以在创建Physics body的时候，就传入一个physics material进去。 之前我们只是传入一个sprite content进去（第一个参数），现在要传入更多的参数，使hero sprite的physics body达到我们预期的效果。 1234# Demo.cppauto hero = Sprite::create(\"hero.png\");auto heroBody = PhysicsBody::createBox(hero-&gt;getContentSize(), PhysicsMaterial(1.0f, 1.0f, 20.0f)); 什么是Physics Material呢？ 根据API可知，我们可以调用这个类的构造函数来创建一个physics material，使得physics body获取一定量的材质。密度，还原力和摩擦力。对于我们的需求来说，只要设置必要的摩擦力就够了。 第三个参数offset为偏移量，想要physics body和sprite的位置错开的话，可以填写这个参数。 1234heroBody-&gt;setDynamic(true); //设置为静态的刚体，不受重力影响 heroBody-&gt;setMass(999999); //设置刚体不可动 heroBody-&gt;setRotationEnable(false); //设置刚体不可转动 heroBody-&gt;getShape(0)-&gt;setRestitution(1.0f); 这些都是可以在API文档中找到设置physics body的方法，学会之后就可以随心所欲地创建属于自己的物理场景了。 没有重力的世界 不是所有游戏都是2D横版闯关的，比如上帝视角。重力在这个场景中存在吗？存在，但是它不是明目张胆地表现出来。就比如一个个小棋子，定格在棋盘上，此时我们不能为这个场景添加重力，于是： 12345# Demo1.cppauto scene = Scene::createWithPhysics();scene-&gt;getPhysicsWorld()-&gt;setGravity(Vec2(0.0f, 0.0f));... 并且还要为sprite设置不受重力影响的效果。 1234# Demo1.cppauto sprite = Sprite::create(\"sprite.png\");auto spriteBody = PhysicsBody::createBox(sprite-&gt;getContentSize());spriteBody-&gt;setGravityEnable(false); 这样，我们的小棋子就定格在棋盘上了。 动动动动起来既然没有了重力，我们如何让它们在存在一个作用力的情况下，让它们停下来呢？ 首先，你需要一个作用力。applyForce和applyImpulse这两个方法能够很好地帮助我们创建给物体施加的力。 1234# Demo1.cppspriteBody-&gt;applyForce(Vec2(100.0f, 100.0f));// spriteBody-&gt;applyImpulse(Vec2(100.0f, 100.0f)); 我们将物体发射到点100.0, 100.0的位置方向去。我还没来得及解释这两个方法是什么意思的时候，心急的朋友就马上开始调试了，结果发现sprite并没有按照预期的那样动起来。这是为什么呢？ 因为力不够大啊孩子，很神奇的是，我们似乎只规定了力的反向而力的大小并没有被规定，但是又如何衡量一个力的大小呢？这是一个很令人纠结的问题。 且先来看文档, 参数只要求填入一个Vec2类型的数值，而且注释是force … 会不会是默认了添加1N的力呢？于是我将代码改成下面这样： 1234# Demo1.cppspriteBody-&gt;applyForce(Vec2(100.0f, 100.0f) * 1000);// spriteBody-&gt;applyImpulse(Vec2(100.0f, 100.0f) * 1000); 果然，精灵动了起来。但是问题又来了，不一会，我就发现精灵根本没有停下来的意思，它在不停地运动。 造成这种问题，主要有两个原因：1、没有摩擦力；2、添加力的方式存在问题。 趁热打铁，我们先来解决力的问题。applyForce有什么问题吗？我们仔细看看API文档就会发现，这是添加了一个持续的力，这个力会不停地添加在sprite上，直到你手动地将其停下来。 那么我们需要一个瞬间的力，就类似弹弓一样。applyImpulse这个时候就出场啦。这个方法能为物体添加一个瞬时的力。 1234# Demo1.cppspriteBody-&gt;applyImpulse(Vec2(100.0f, 100.0f) * 1000);// spriteBody-&gt;applyForce(Vec2(100.0f, 100.0f) * 1000); 快快快快快停下可是我们发现精灵还是不能很好地停下，但是至少它不会像之前那么飞奔了。 刚刚说了，摩擦力存在问题。我们不是已经设置过摩擦力了吗？它会有什么问题呢？ 摩擦力不代表空气阻力，在cocos2d-x的物理引擎创建的世界中，是默认不存在空气阻力这个高大上的属性的。 完蛋，物理引擎都没提供的功能，让我如何是好啊。很幸运的是，physics body提供了一个叫做setLinearDamping(设置线性阻尼)的方法。 这个方法可以很好地使在无重力状态下的物体停下来。 1234# Demo1.cpp...spriteBody-&gt;setLinearDamping(5.0f); 我将sprite body的阻尼设置为5.0f，其所产生的具体效果，肯定要在调试中才能看出。很好，sprite在飞一段时间后，能很好地停下来了。 烂尾当然物理引擎的魅力到这里还并没有被完全探索出来，只是给大家一个系统地学习方案而已。 还是那句老话，我希望将所学的一切用来解决实际的问题并将其转化为生产力，以上的全部都是我在学习中了解到的，每一章节都包含了很多小坑坑，不断地填补，以至刻骨铭心。 以上。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://www.noddl.me/tags/cocos2d-x/"},{"name":"游戏开发","slug":"游戏开发","permalink":"http://www.noddl.me/tags/游戏开发/"},{"name":"物理引擎","slug":"物理引擎","permalink":"http://www.noddl.me/tags/物理引擎/"}]},{"title":"Cocos2d-x之监听键盘按住事件","slug":"cocos2dx_keep_going","date":"2016-05-07T06:13:00.000Z","updated":"2018-03-18T12:00:01.000Z","comments":true,"path":"2016/05/07/cocos2dx_keep_going/","link":"","permalink":"http://www.noddl.me/2016/05/07/cocos2dx_keep_going/","excerpt":"我只想让精灵一直向前走，为什么这么难？","text":"我只想让精灵一直向前走，为什么这么难？ 一切故事发生的背景同济大学软件学院每个学期会要求学生独立或者组队完成一个大项目，于是2016年大项目是用cocos2d-x这款引擎制作一个自己的游戏。 有幸能和大神组到了一起，形成了两人小分队。 C++语言方面我还真的没有拿得出的东西，但是在cocos2d-x的学习中，还是略有收获的。今天想谈谈通过监听键盘事件从而让精灵一直走路，松开按键精灵就停下的功能。就好像骑车一样，按住一颗按键，就会向前行驶，不按就停下来。 一个简单的Sprite先在Demo.h里声明出一个sprite成员作为我们今天的主角,顾名思义我叫它hero，因为是简单的例子，就不兴师动众创建一个严谨的主角类了。123456789101112131415# Demo.hclass HelloWorld : public cocos2d::Layer&#123;public: static cocos2d::Scene* createScene(); virtual bool init(); cocos2d::Sprite *hero; // a selector callback void menuCloseCallback(cocos2d::Ref* pSender); void update(float delta) override; // implement the \"static create()\" method manually CREATE_FUNC(HelloWorld);&#125;; 添加一个”僵尸”sprite再在Demo.cpp中实实在在创建出这个带有纹理的sprite，设置居中位置，并添加到场景中。就像开头贴出的效果图，我们能够控制的精灵纹理是一张《植物大战僵尸》中僵尸的贴图，而背景其实也是一个精灵对象，相关代码就不在此列出了。 1234567# Demo.cpphero = Sprite::create(\"zombie.png\");// position the sprite on the center of the screenhero-&gt;setPosition(Vec2(visibleSize.width/2 + origin.x, visibleSize.height/2 + origin.y));// add the sprite as a child to this layerthis-&gt;addChild(hero, 0); 添加键盘事件监听我相信你一定会一些基本的事件监听(Event Dispatcher)使用方法了吧，如果不是，请参照官方文档中的该章节。 当然其中有一些鼠标监听之类的方法不是我们今天需要的，EventListenerKeyboard才是今天的重头戏。于是我们在Demo.cpp 中创建一个监听器，并赋予一个lambda函数给它，让它能知道监听了键盘事件后该做什么事情。 12345678# Demo.cppauto listener = EventListenerKeyboard::create();listener-&gt;onKeyPressed = [=](EventKeyboard::KeyCode keyCode, Event* event)&#123; log(\"key pressed\");&#125;;_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(listener, this); 这样一来，按任意键，控制台就会输出”key pressed”字样的信息了，这为我们下一步做了良好的铺垫。传进来的参数是什么意思？不必解释了吧… 记录一共按过哪些键，以及其状态我们还要记录一下一共按过了哪些键，以及现在它们是否还被按着。通俗地讲，就是用KeyPressed事件将当期按下的键信息保存起来，表示它现在被按下了。再判断触发KeyReleased事件时，将触发的按键信息去除掉，表示现在这颗键已经不再处于被按下的状态了。 于是我们在头文件里创建一个map类型的成员，取名为keys,用以保存我们按键记录。 1234567891011121314151617# Demo.hclass HelloWorld : public cocos2d::Layer&#123;public: static cocos2d::Scene* createScene(); virtual bool init(); cocos2d::Sprite *hero; // a selector callback void menuCloseCallback(cocos2d::Ref* pSender); void update(float delta) override; // implement the \"static create()\" method manually CREATE_FUNC(HelloWorld);private: std::map&lt;cocos2d::EventKeyboard::KeyCode, bool&gt; keys;&#125;; map键为每个按键所对应的keycode, 值为现在这颗按键是不是处于被按下的状态，正在被按为true, 没被按(即 松开)为false。 当然，我们还要为键盘监听器添加一个KeyReleased事件，用以监听任意按键被松开那一刻的状态。 12345# Demo.cpplistener-&gt;onKeyReleased = [=](EventKeyboard::KeyCode keyCode, Event* event)&#123; log(\"key release\");&#125;; 简简单单一些在控制台的输出是远远不够的，现在开始改进我们的俩监听事件，让它们能增加或改变keys里的记录。 123456789# Demo.cpplistener-&gt;onKeyPressed = [=](EventKeyboard::KeyCode keyCode, Event* event)&#123; keys[KeyCode] = true;&#125;;listener-&gt;onKeyReleased = [=](EventKeyboard::KeyCode keyCode, Event* event)&#123; keys[KeyCode] = false;&#125;; 你问我为何可以写得如此草率简单，然而事实就是如此。在松开事件发生的时候，根本不需要判断在keys是不是已经存在了这个按键，因为，被松开就代表着，肯定被按下了。当然，我们排除在游戏之外的窗口按下，再切换到游戏内松开的情况，对于这种非法份子，今天网开一面。 Sprite show me your hands老朋友update事件每一个由Node类继承下来的子类中，无论你是精灵类，场景类，都有一个update方法，当判断发生改变时，能够做出一些反应。 要使用update，先要了解三种调度器Scheduler 我们为Demo类添加一个默认调度器，表示它要使用update方法。并且添加一些简单的代码到update事件中去。 12345678910111213# Demo.cppbool HelloWorld::init() &#123; ... this-&gt;scheduleUpdate();&#125;void HelloWorld::update(float delta) &#123; // Register an update function that checks to see if the CTRL key is pressed // and if it is displays how long, otherwise tell the user to press it Node::update(delta); log(\"update\");&#125; 打开游戏以后，就会看见控制台正在疯狂地输出”update”，说明我们的默认调度器监听了每一帧的改变并执行了我们自定义的操作。 你真的…一直在按着我吗？我们创建一个方法，叫做isKeyPressed，用来判断一个按键是否当前是否处于被按下的状态，如果是，返回true，交给update来处理后续动作。 123456789# Demo.cppbool HelloWorld::isKeyPressed(EventKeyboard::KeyCode keyCode) &#123; if(keys[keyCode]) &#123; return true; &#125; else &#123; return false; &#125;&#125; 时时刻刻判断特定的按键是否被按下除了上下左右键，其他的我们都不需要理会，这个需求如何实现呢？ 我们要让之前创建好的hero左右动，那就要在update事件中时时刻刻判断着KEY_LEFT_ARROW或者KEY_RIGHT_ARROW是否被按下，如果是，就对主角执行动作(action)，没有，就忽略。 我们将update方法进行改写： 12345678910# Demo.cppvoid HelloWorld::update(float delta) &#123; Node::update(delta); auto leftArrow = EventKeyboard::KeyCode::KEY_LEFT_ARROW, rightArrow = EventKeyboard::KeyCode::KEY_RIGHT_ARROW; if(isKeyPressed(leftArrow)) &#123; keyPressedDuration(leftArrow); &#125; else if(isKeyPressed(rightArrow)) &#123; keyPressedDuration(rightArrow); &#125;&#125; 等等，keyPressedDuration是什么东西，内置方法吗？我们接着看。 Hero: 我该做些什么呢？差不多都快要搞定的时候，我们的hero发现了一个严重的问题 — 它该做些什么。 我们新创建一个方法叫做keyPressedDuration，表示着按下/按着对应按键后，hero应该做些什么。 12345678910111213141516171819# Demo.cppvoid HelloWorld::keyPressedDuration(EventKeyboard::KeyCode code) &#123; int offsetX = 0, offsetY = 0; switch (code) &#123; case EventKeyboard::KeyCode::KEY_LEFT_ARROW: offsetX = -5; break; case EventKeyboard::KeyCode::KEY_RIGHT_ARROW: offsetX = 5; break; default: offsetY = offsetX = 0; break; &#125; // 0.3s代表着动作从开始到结束所用的时间，从而显得不会那么机械。 auto moveTo = MoveTo::create(0.3, Vec2(hero-&gt;getPositionX() + offsetX, hero-&gt;getPositionY() + offsetY)); hero-&gt;runAction(moveTo);&#125; 我们判断code变量从而得知用户按了左右键中的哪一个，再执行对应的动作。 烂尾最后的最后，我们将代码一整合，按住左键或者右键，就可以看见hero自由地走动啦。 本来作为一名cocos2d-x的初学者，遇到这种问题，我通常就面向csdn和stackoverflow编程了，通过他们来解决我的问题。可无奈，我竟然难以找到令我真正看得懂的教程，英文尚有几篇，而中文关于这方面的根本没有。 既然没有，虽然我才刚刚学习，但本着不逃避的态度，那就我来写一篇吧。 下一章就该讲讲我和物理引擎的一些故事了，下期再见。 以上。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://www.noddl.me/tags/cocos2d-x/"},{"name":"游戏开发","slug":"游戏开发","permalink":"http://www.noddl.me/tags/游戏开发/"}]},{"title":"Django项目中的stylus","slug":"stylus_on_django","date":"2016-05-04T05:30:00.000Z","updated":"2018-03-18T11:57:39.000Z","comments":true,"path":"2016/05/04/stylus_on_django/","link":"","permalink":"http://www.noddl.me/2016/05/04/stylus_on_django/","excerpt":"不仅仅是django，在大多数的MVC框架中也都适用。","text":"不仅仅是django，在大多数的MVC框架中也都适用。 为什么是stylus与sass/less不同，stylus的语法更加贴近与python，都采取了缩进的语法，显得十分亲切。stylus的功能也不落后于sass/less，开发过程中的强大也能处处体现。 随着前端圈的不断演变，css预处理和后处理也逐渐崭露头角。 并且gulp、grunt、webpack等一系列的前端自动化构建工具备受青睐。 为什么使用前端自动化构建工具呢？因为我们懒啊，最基本的需求就是自动检测源代码的改变，从而生成出相应的格式的代码。 为什么选gulp前面也说了，作为一个很懒惰的开发者，我总是想用各种工具去减少一些重复的操作。浏览器无法识别stylus来作为样式用以修饰我的html元素，我就要用工具去将stylus的代码翻译成css，再link到html中去。 可是这样就伴随着一个问题，是不是我每次修改stylus都要重复一遍这样的操作呢，有没有一种好的办法来使我每次一修改stylus代码，就能产生出对应的css呢？ 方法当然是有的。Gulp自动化构建工具会帮忙我们减少很多很多重复的操作。前端虽然天天变化，但是一些工具还是非常值得称赞的 Usage开始小试牛刀。还是不变的npm安装包环节，在上一篇hexo简易使用中我已经提到了nodejs和npm的安装，所以这里不再赘述。 先安装全局的gulp，以至于我们能够在任意目录下使用gulp1sudo npm install gulp-cli -g 在项目的根目录下：1npm install gulp --save-dev 这样我们的django项目下的gulp就安装好啦。 然后我们在根目录下创建一个gulpfile.js文件，这些步骤都是根据gulp document来的。 不急着做下一步，我们先看看django项目的目录结构 app app1 app2 static app css js app1 app2 templates node_modules 明确一下需求：我们需要检测static/app/css文件夹里的stylus文件的变动，再在该目录生成对应的css文件。 要实现这个需求，思考一下我们需要一些什么工具。gulp肯定是必需的还有gulp中用来处理stylus的处理器，gulp-stylus还需要后处理器工具poststylus, aautoprefixer，用来适配不同浏览器的最新css特性。 所以我们用npm安装：1npm install gulp-stylus poststylus autoprefixer rucksack-css --save-dev 安装完成以后，我们在gulpfile.js中写入1234567891011121314151617181920212223242526var gulp = require('gulp'), stylus = require('gulp-stylus'), poststylus = require('poststylus');function handleStylus(path) &#123; path = path || 'static/**/*.styl' gulp.src(path, &#123;base: 'static'&#125;) .pipe(stylus(&#123; use: [ poststylus(['autoprefixer', 'rucksack-css']) ] &#125;)) .pipe(gulp.dest('static'))&#125;gulp.task('stylus', function () &#123; handleStylus()&#125;)gulp.watch('static/**/*.styl', function (event) &#123; handleStylus(event.path) console.log('change: ' + event.path)&#125;)gulp.task('default', ['stylus']) 先不管代码是什么意思，随后我们在django项目目录下使用gulp命令来默认启动gulp的default任务1gulp 这样，我们的static/app/css文件夹里的stylus文件就被监控起来了，一旦被修改，就会立马在该目录下产生对应的css文件。 原理时间占坑待填","categories":[{"name":"技术","slug":"技术","permalink":"http://www.noddl.me/categories/技术/"}],"tags":[{"name":"django","slug":"django","permalink":"http://www.noddl.me/tags/django/"},{"name":"stylus","slug":"stylus","permalink":"http://www.noddl.me/tags/stylus/"},{"name":"gulp","slug":"gulp","permalink":"http://www.noddl.me/tags/gulp/"}]},{"title":"关于失眠这件事","slug":"lose_sleep","date":"2016-05-04T04:00:00.000Z","updated":"2018-05-05T16:32:33.721Z","comments":true,"path":"2016/05/04/lose_sleep/","link":"","permalink":"http://www.noddl.me/2016/05/04/lose_sleep/","excerpt":"我不以孤独为荣，但我以孤独为生。","text":"我不以孤独为荣，但我以孤独为生。 从初中才出现的怪兽失眠这只洪水猛兽，从我初中的时候才开始慢慢席卷我的生活。初中刚刚开始的住校生活，平时都和同学们住八人间的寝室，周末才能回家。那个时候最烦恼的，一个是成绩，一个便是失眠。 说是失眠，其实也只是偶尔睡不着，并不像天天顶着黑眼圈的失眠熬夜老玩家。从前叫作那个点儿，倘若放到了现在，也充其量是夜晚的前奏。 以前过得没有现在这样没心没肺啊，人在睡不着的时候，就会开始胡思乱想。情到深处，还会应景地流泪，伴随着室友断断续续的呼噜声，显得愈发悲壮。 害怕着看见天亮。天亮就意味着，到了凌晨我却还没有睡着。 没有原因的原因其实我也不是没有找过原因，一来室友的鼾声实在太大，时常在梦境里也会地动山摇。睡着的时候也就作罢了，还没睡着的时候，只能用枕头遮住耳朵，含恨而睡。只怪当初自己脾气太好，到了高中有人打呼噜，就是又踢床板，又扔书砸醒的事了。 二来，我喜欢在感觉要睡不着的时候看时间。枕边摆着手表，石英表滴滴答答走动的声音在夜深人静的时候就会显得格外清脆，像生命流逝的哀鸣，每个一秒就提醒着我，全世界都睡着了，就我还没睡。没错，此时此刻，我就是全世界最孤独的人，俨然一个被休普诺斯抛弃的孩子。 以前还缺少一些诗意，以至于无法坦然面对四下无人的寂静。不会选择在失眠的夜晚打开窗户看星星，不会思考未来该如何去做。无法享受安静带来的祥和，仅仅只是惶恐着回忆着不安着，想着自己童年，将其与惨淡的现实相比较，碰撞出黑洞般的哀伤，越来越睡不着。 烂尾现在我看着微信上互道的晚安，思索着又有几个在道晚安后彻夜难眠的灵魂呢。我不知道他们在想些什么，但我真的知道，在一个个沉睡的梦境边上，也有一个个无奈的转身感受着长夜带来的折磨与煎熬。他们或许明天有一场重大的考试，或许害怕额头上长痘痘，都无法改变一个既定的事实，很不安，想找人倾诉，但是内心又排斥着，消化着失眠小怪兽所带来的一切。 高中以后，我就热衷地把一些思想和行为化作看得见的生产力，一切为其服务，在必要的时候，提出相应的解决方案。 可惜关于失眠这件事，我只能说，少思考，少看表。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://www.noddl.me/tags/故事/"}]},{"title":"说起高中那年，我在读些什么","slug":"read_in_high_school","date":"2016-05-02T01:45:00.000Z","updated":"2018-03-18T12:00:29.000Z","comments":true,"path":"2016/05/02/read_in_high_school/","link":"","permalink":"http://www.noddl.me/2016/05/02/read_in_high_school/","excerpt":"高铁路过金华站的时候，手机打出这篇文章以纪念高中那些年脑海里的幻想们。","text":"高铁路过金华站的时候，手机打出这篇文章以纪念高中那些年脑海里的幻想们。 说起高中那年，我在读些什么 莫言拿诺贝尔奖的新闻过了很久才传到消息不灵通的我们耳中，我知道为什么我会选文科，但是我不觉得我会是一个好的文科生，因为我骨子里尊崇绝对的理性。 然而我又觉得自己会是一个优秀的作家，因为很多人都这么说。从一开始我写的文章被老师赏识后，写作的机会不断向我涌来，细到黑板报上的小段落，大到各式各样的比赛。一开始我很清楚自己只是一个会堆砌华丽词藻的砖瓦工，到后来获得的奖多了，被人夸誉得多了，渐渐开始迷糊，却到逐步意识到自身的伟大，于是决心从搬运工转向生产。 那时候我对自己说，要看很多很多的书籍，才能用最合适的手法写出脑子里那个最精彩的故事，哦，不要忘记多加一些抽象和比喻，还要深刻，要真实，写兄弟一定要一起翻墙上网干架，写爱情一定要寻死觅活，然后把自己悲伤得逆流成河。 看的书多了，往往就容易感叹自己现在的生活如囚犯一般。寻思着怎么就没有一场歇斯底里的恋爱，怎么就没有一次惊心动魄的网吧之旅。结论其实通常很简单，不够帅气霸气足以吸引异性，成绩渣如狗没有任何资本让家长给予我足够的权限开始一场说走就走的旅行，没有说走就走的旅游，就不会产生一次航班上优雅而又美丽的邂逅。这样人生简直惨不忍睹，不符合一位思想家和骚人的做派，我开始制定一系列的计划，首要任务是提高成绩，这也是最虚的开始。 其次，我要健身，我要去掉脸上的痘痘，拒绝垃圾食品。写着写着，课代表走过来敲敲桌子，“就你一个人作业没交了” … 旅行看来是没戏了，高中就是应该好好念书的嘛。我看着不上不下的成绩，憧憬着毕业以后的自由生活，不由得又给自己打了一波鸡血。 但是书还是要接着看的，这点我父母尤为支持。 于是我看开始向往小四笔下那个种满法国梧桐的城市，我爱上水泥森林里冷冰冰的气息。然后当然是要在秋天，在开着几家文气小清新咖啡店的老街边，习习海风后的金黄梧桐落叶堆满角落。牵着自己爱的姑娘的小手，她的颈部一定要有淡淡的香水味，深色的风衣，肩并肩不说话，逛着街。 这些事在那个狭小拥挤的教室里，春夏秋冬，我想了一次又一次，想象里的那一对小年轻，会成为摄影师镜头内无暇的风景，变成作家笔下那一串令人遐想的完美省略号。 想象里这些事，若干年后我都做过。我把自己和她代入高中那个青年脑海里，就像把常数代入最后的方程式一样，试图解出以前的我心里那个渴望。 毫无疑问我失败了，可是我指尖触摸到的，鼻尖感受到的气息，甚至是街角的那一小堆落叶，任何布置都和故事中的一模一样。我就像一个患得患失的导演，殚精竭虑，试图重新某晚的一个梦境，就在看似要得到的那一瞬间，再次充满疑虑，不对，这不是我真正想要的。 你问我会不会悔恨当初那个不努力不上进的自己。我早就原谅他了，原谅了从前那个笨手笨脚的自己。在适当的年华里做了最合适的事情，有过幻想，暗恋的女生，也想要去厦门开一家咖啡屋，背着包旅行的样子。我听着同学们的高谈阔论，有网游，有八卦，哪个女生喝水的样子可真是作，哪位兄弟昨天校门口又大开杀戒。 苦中作乐的时代已经过去了，我不愿再回去，无论别人口中多么美丽动人的岁月啊，人生经历一次就够了，就像夏日里最后一口冰淇淋，开学前的最后一把游戏。 人终究是要向前走的，可是，在他们谈论高中那年的时候，我究竟读了什么，我究竟成为了一个怎样的人，在那个漫长的三年。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://www.noddl.me/categories/杂谈/"}],"tags":[{"name":"高中","slug":"高中","permalink":"http://www.noddl.me/tags/高中/"}]}]}