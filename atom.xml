<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白玉为堂金为马</title>
  
  <subtitle>70%有趣的灵魂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.noddl.me/"/>
  <updated>2018-06-18T11:41:19.477Z</updated>
  <id>http://www.noddl.me/</id>
  
  <author>
    <name>周左左</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ukelele伴奏 父亲节排练</title>
    <link href="http://www.noddl.me/2018/06/18/ukelele/"/>
    <id>http://www.noddl.me/2018/06/18/ukelele/</id>
    <published>2018-06-18T07:36:27.028Z</published>
    <updated>2018-06-18T11:41:19.477Z</updated>
    
    <content type="html"><![CDATA[<p>花了两天上手了Ukelele，正好室友们也打算在父亲节拍一个小短片给父亲们。</p><a id="more"></a><p>由于技艺尚不精，只在副歌部分参与了一下，再次感谢大神吉他和电子琴带我玩耍。</p><p>歌曲是筷子兄弟的《父亲》，我们的短片在这里！</p><video controls="controls" style="width: 100%;"><br>  <source type="video/mp4" src="http://static.noddl.me/father.mp4"><br></video>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了两天上手了Ukelele，正好室友们也打算在父亲节拍一个小短片给父亲们。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>澡堂生物见闻录</title>
    <link href="http://www.noddl.me/2018/05/14/bathhouse/"/>
    <id>http://www.noddl.me/2018/05/14/bathhouse/</id>
    <published>2018-05-14T02:30:40.664Z</published>
    <updated>2018-05-19T15:30:43.863Z</updated>
    
    <content type="html"><![CDATA[<p>细细数数住宿生涯已过十年，给我印象最深的莫过于在学校澡堂里千奇百怪的生物们了😈。<br><a id="more"></a></p><h2 id="内裤幽灵"><a href="#内裤幽灵" class="headerlink" title="内裤幽灵"></a>内裤幽灵</h2><p><strong>不知道你在高校里见过穿着内裤洗澡的幽灵。</strong>这是一种神奇的生物，他们常常出没在大一新生入学的前几个月。你可以轻而易举地在公共澡堂里面看见他们，因为他们五颜六色的内裤十分夺目。幽灵们都带有来自南方腼腆，站在澡堂一隅克制着自己并做出最小幅度的动作，以至于不让更多人投来奇怪的目光。</p><p>若有同学问起，他们则会害羞地抛出一系列诸如”顺带连内裤也一起洗了”的言论，以掩盖他们的腼腆的举动。但是，可惜却可贺的是，他们来自南方的骄傲，会在几个月之后被来自北方的同学奇异的目光所炙烤得所剩无几。从此以后幽灵不再是幽灵，他们也融入到了一丝不挂的洗澡大军中，全身的肉坦荡荡地在风中荡漾。</p><h2 id="攀比怪"><a href="#攀比怪" class="headerlink" title="攀比怪"></a>攀比怪</h2><p>“<strong>有人的地方就有江湖，有澡堂的地方就有攀比</strong>“。你时常会在男生澡堂里听见一些关于长度以及体积的形容词，如果你初来乍到，一定会感到困惑不解。发出这些的声音的就是<strong>攀比怪</strong>，其最明显的特征就是贬低他人身体上的某些部位，而夸大自身。部位的范围自头到脚，诸如头发稀疏、大腹便便都是攀比怪们常见的说辞。</p><p>攀比怪这个生物也十分奇特，一般分为两种。第一种为<strong>显式攀比怪</strong>，他们口无遮拦，而且声音洪亮地可以传到澡堂的各个角落，大声地”控诉”着对方身上器官的软小。第二种为<strong>隐式攀比怪</strong>，他们沉默寡言，但是与正常的洗澡客大有不同。隐式攀比怪的视线一般略低于常人，在嘈杂的澡堂中疯狂地打量他人的重要器官。他们一般喜欢在脱裤子的时候调整自己视线，从而进入战斗模式，如果说显式攀比怪造成的是单体伤害，那隐式攀比怪便将是范围性精神攻击。</p><p>以上就是男性攀比怪的种种特征描述，如果你们不幸在澡堂中遇见了他们，猛踢下体就可以让他们安静下来了。 :D</p><h2 id="谦让大师"><a href="#谦让大师" class="headerlink" title="谦让大师"></a>谦让大师</h2><p>这种生物很奇特，他们出现的条件往往是在你换衣服的时候。你会发现他们一直站在你的身边一动不动，一开始会将他们误认为是<strong>攀比怪</strong>。其实不然，你在穿完衣服以后，会发现你站着换衣服的位置，其实也是他们的位置。换句话说就是，<strong>你挡住了他们换衣服。</strong></p><p>但是谦让大师们不吵也不闹，也不提醒你需要稍微让一让。他们就站在一旁，无论是否裸体，静静地等待你换完衣服。当你看向他们的时候，他们或许还会报以微笑。</p><p>如果说澡堂生物图鉴中有好感度排行的话，谦让大师无疑是属于前列的。</p><h2 id="傣族后裔"><a href="#傣族后裔" class="headerlink" title="傣族后裔"></a>傣族后裔</h2><p><strong>泼水节</strong>其实也可以在宿舍楼天天上演。我在读高中的时候，每逢夏季楼道在体育课结束后，都是一片狼藉，接近浴室的地方更是水漫金山。更不幸的是，厕所与浴室相连，如果衣着整齐地去上厕所，时常会遇到一群手里拿着脸盆的壮汉，口中叫着奇怪的语言，疯狂地向你泼水。</p><p>当这种生物群聚在一起洗澡的时候，一些有趣而又激烈的事情几乎一定会发生。他们对脸盆里所含的水量以及能够造成的伤害拿捏得像玩英雄联盟一样精确。对于谁刚刚又泼了自己一脸，这个仇，就算是追到寝室里，也一定要报。</p><p>更有趣的是，如果这些生物们都是南方人，你可能会发现<strong>傣族后裔</strong>与<strong>内裤幽灵</strong>是同一个生物的奇观。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;细细数数住宿生涯已过十年，给我印象最深的莫过于在学校澡堂里千奇百怪的生物们了😈。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>惊弓之鸟</title>
    <link href="http://www.noddl.me/2018/05/09/frightened/"/>
    <id>http://www.noddl.me/2018/05/09/frightened/</id>
    <published>2018-05-09T11:25:14.049Z</published>
    <updated>2018-05-09T11:49:42.676Z</updated>
    
    <content type="html"><![CDATA[<p>条件反射有时候真的挺可怕的。</p><p>在家用电脑的时候，明明一直是正常使用。可不知为何，一旦其他人接近的时候，总会条件反射地关闭当前的窗口。风驰电掣，而又声若蚊蝇。<br><a id="more"></a></p><p>其实就是在写代码或是查阅文档，却惊地像怕被发现了自己什么见不得人的肮脏行径。</p><p>待对方离开后，又开始胡思乱想，生怕对方会因为我的大动作而产生误会，误以为我在浏览一些奇怪的东西。</p><p><strong>我思考了很近，为什么经常会有这种现象发生。</strong></p><p>200X年，想必只要是网民都会饱受各种前凸后翘的美女，突然跳出来“诱惑”你去玩游戏的折磨。与其说是巧合，不如说是必然的。在我父母走过来问我吃不吃水果的时候，发现我的屏幕上的丰乳肥臀，双方面面相觑，从而消失笑容。</p><p>我真的想很把我产生这种奇异条件反射的原因怪罪在无良游戏商头上，一来他们破坏了我与父母之间在电脑使用上的信任，二来他们欺骗了我，因为在游戏里根本就不会有什么美女。别问我是怎么知道的，可能是阿轩告诉我的。</p><p><strong>要是能让我既保留习惯，却不让旁人发现就好了。</strong>虽然我真的没看奇怪的东西，但是就是控制不住自己去关闭窗口。</p><p>于是很久以前，我开始苦练如何无声关闭窗口的技巧。鼠标点击右上角关闭按钮，虽然声音轻、幅度小，但是速度未免太慢。而使用键盘又会产生很响亮的声音，动作幅度也过于剧烈。我的大学同学甚至还研发了一种只要老板站身后就自动关闭窗口的程序。然而这个问题始终没有被很好地解决，我们一直在致力于解决这个问题的路上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;条件反射有时候真的挺可怕的。&lt;/p&gt;
&lt;p&gt;在家用电脑的时候，明明一直是正常使用。可不知为何，一旦其他人接近的时候，总会条件反射地关闭当前的窗口。风驰电掣，而又声若蚊蝇。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>接offer这件事</title>
    <link href="http://www.noddl.me/2018/05/06/offer-gf/"/>
    <id>http://www.noddl.me/2018/05/06/offer-gf/</id>
    <published>2018-05-05T16:27:15.618Z</published>
    <updated>2018-05-05T16:32:18.107Z</updated>
    
    <content type="html"><![CDATA[<p>  今天跟好朋友又一次不可避免地讨论起了她的对象。她的对象总是很神秘，我也很是佩服她的耐心。因为她的对象已经很久很久没有出现了。<br><a id="more"></a><br>  我的朋友，说她没有对象，这是不完全不能被认同的，她毕竟是身为一个如此优秀的女孩子。所以与其说她很久没有谈恋爱了，不如说她是完全不想去找。所以我俩话题的风向标，总是从一声“唉”的感慨开始，慢慢转向情感话题。从最初坚定的单身贵族主义，到如今各种为对方儿子取名，可见对方近些年，各个牌子的狗粮也都尝了个遍。虽然都是无意义地瞎扯，但是好歹也是有话题的。</p><p>  回到话题风向标还没倒转的那会儿。最近的毕业季，我和她都开始忙着找工作单位实习、一旦涉及到资本主义，就会提起钱；一提钱，双方就会因为钱而签约。而offer就是“签约”的儿子，但“签约”只负责生，不负责养。那自然的，接offer的我们就成了最苦逼的保姆。这种吃力不讨好的事情，却人人都挤破头地喜欢。接了offer，好似万年单身狗，突然有了一个愿意跟你处下去的姑娘。虽然日子可能不会太长，但是好歹不再依靠吃狗粮为继了。而且接offer这件事本身，就和谈恋爱也有很多相同点。</p><p>  为什么我坚持不用社交软件（知乎算不算），因为我总是感到，如果一个人想要脱单就去用社交软件，就好像：在你毕业之际走投无路之时，突然发现自己还有母校这种靠山存在（平时翘课的时候永远也想不起）。于是你抱紧了学校的大腿，想让学校给你安排一份实习。学校当然愿意啊，不然芸芸学子打着母校的英名在外好吃懒做传出去多不好看。你也不在乎实习单位的好差了，只要有一根稻草能抓住就已是万幸。社交软件就像学校一样，当然很容易就能帮助我们安排一段良好的因缘，毕竟它一次塞上百个姑娘给你“任君自由选择”。</p><p>  这样的统筹安排，在缘分论者的观念中是不可饶恕的。所以自然，多数人选择到社会中“广撒网”。临近毕业，诸如以老学长的身份多参加一下社团活动、学生会的哥们推荐一下、退伍的兵哥哥帮忙在军训的时候物色一下新来妹子之类的<strong>老渔夫本领</strong>，不下海当然是学不会的。不过宅在家里的二次元渔夫，也是完全不屑这种现充行为的。说回接offer，既然广撒网这种行为是有客观原因的，那么各种投简历收offer，也自然无可厚非了。BAT走一走，FLAG遛一遛，一圈下来再去小厂装一波，自然收获颇丰。<strong>也正是应了杨同学那句话：“如果爱情要有收offer这么简单，那就好了”</strong> </p><p>  老渔夫表示想要一条前凸后翘金龙鱼的心情，就像一名应届生想要收到一份工资高加班少offer的心情一样迫切。然而金龙鱼不常有，现实里渔网里大多都是黝黑的鲶鱼。很多企业也喜欢吊着应届生，面试周期极长无比，仿佛你向金龙鱼表白的时候，她却对你说：“我有一段很长的考察期，时不时会派出我的前男友们来刁难你，用以考验你对我的爱”。这个过程短则一两月，长则半年有余。在这期间，她前男友们的百般刁难让你抓破了头，而金龙鱼的肥美又让你日夜好逑。当然，最难受的是，网里已经捕获的鲶鱼还在上下乱窜，时不时提醒一下你是不是该考虑一下它们了。往往几日之后，鲶鱼便会纷纷坦言，如果你一周之内再不有所表示，那么它们就会离开。</p><p>  于是你仔细一想，发现事情并不简单。如果鲶鱼们都走了，而金龙鱼又没有钓到，那么自己不久以后又将回到曾经吃狗粮度日的黑暗生活。口腔里还弥漫的狗粮味窜到了脑门，大脑开始大吼，并警告你是时候该做出选择了。你是要吃前凸后翘未到手的金龙鱼，还是在眼下这些鲶鱼挑一只过日子。</p><p>  长辈通常会跟我们说，爱情这个东西，只有更好的没有最好的。我们选择了一个，总会有更优秀的目标摆在我们面前。可是我们年轻人其实也总是会选择抛开这些教诲，并给了长辈一头槌，在追求理想中金龙鱼的道路上越走越远，顿顿狗粮也在所不惜。因为啊，<strong>在这个过程中，我们已经让自己变成了一个更加优秀的人</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  今天跟好朋友又一次不可避免地讨论起了她的对象。她的对象总是很神秘，我也很是佩服她的耐心。因为她的对象已经很久很久没有出现了。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>你和播放器</title>
    <link href="http://www.noddl.me/2018/04/20/player-with-you/"/>
    <id>http://www.noddl.me/2018/04/20/player-with-you/</id>
    <published>2018-04-20T14:43:11.000Z</published>
    <updated>2018-04-20T14:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>呐，不知道你有没有听说过一种比喻</p><p>与其说是用播放器，不如说是与播放器谈恋爱</p><a id="more"></a><p><br></p><p>听起来，就好像拿女朋友与播放器相提并论</p><p>这听起来似乎很荒谬，也确实很荒谬</p><p><br></p><p>“换一个新的播放器就像与女生分手一样”</p><p>你在前任那里收藏的一首首歌曲，路边听的，挂耳机在地铁上听的，甚至是她不自觉推荐给你的</p><p>她推荐的歌恰到好处地也受你的青睐，就像你肚子里可爱的小蛔虫</p><p>尽管有很多小毛病，还是克制不住地爱她，逢人就夸</p><p>经常会这样想着</p><p>“让我跟她分开，这是不可能的事情吧。”</p><p><br></p><p>不知道从什么时候开始，你觉得她越来越作</p><p>她嘟嘴生气的样子，开始懒得去搭理</p><p>甚至有时候，三番五次触及你的底线</p><p>像是老套的电视剧，这一天终于到来了</p><p>“其实这不代表我不爱她了，只是不得不分开而已。“</p><p><br></p><p>朋友开始给你物色其他”选择“</p><p>”选择“会唱的歌比前任丰富得多，真是一颗有趣的灵魂呢</p><p>性格也比前任要好很多，是一颗完美的灵魂</p><p><br></p><p>可是啊，在前任那里收藏过的歌曲，是在天天搭乘的地铁上听的，是熟悉的小巷里听的</p><p>现在偶尔听到它们，也觉得这些歌很有过去的味道。</p><p>但是你在现任那里，是无论如何也不会继续收藏了吧。</p><p><br></p><p>如果听过的歌，能立马抛之脑后</p><p>或者收藏的歌单也能一并转移</p><p>那么对于播放器的比喻，原谅我举的实在不恰当。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;呐，不知道你有没有听说过一种比喻&lt;/p&gt;
&lt;p&gt;与其说是用播放器，不如说是与播放器谈恋爱&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>307寝室敏捷运动宣言</title>
    <link href="http://www.noddl.me/2018/03/24/307-sport/"/>
    <id>http://www.noddl.me/2018/03/24/307-sport/</id>
    <published>2018-03-24T15:10:50.000Z</published>
    <updated>2018-03-24T15:35:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>介于307寝室的诸位纷纷发现自己在2017年，2016年以至追溯到很久以前，都发现自己在慢慢变胖。从而到了2018年，发现身体开始发酵。终于有一天，我们提出了寝室敏捷运动宣言…</p><a id="more"></a><h2 id="敏捷运动宣言"><a href="#敏捷运动宣言" class="headerlink" title="敏捷运动宣言"></a>敏捷运动宣言</h2><p>我们一直在实践中探寻更好的减肥健身方法，<br>身体力行的同时也帮助室友。由此我们建立了如下价值观：</p><p><strong>相互鞭策</strong> 高于 <strong>自律健身</strong><br><strong>强制罚款</strong> 高于 <strong>友情提醒</strong><br><strong>拍照为证</strong> 高于 <strong>口头描述</strong><br><strong>优先运动</strong> 高于 <strong>减少饮食</strong></p><p>也就是说，尽管右项有其价值，我们更重视左项的价值。</p><h2 id="具体规章"><a href="#具体规章" class="headerlink" title="具体规章"></a>具体规章</h2><p>每天必须进行一项高强度的体育运动，或走路8000步。选择以上的任何一项，都需拍照或截图作为证据，发到Chat group中。</p><p>如果有人在当日尚未达标，而被同行检举揭发，发现确有其事，则被检举人需向其他成员缴纳罚款金。另，未被发现或检举则不算数。</p><h2 id="成效"><a href="#成效" class="headerlink" title="成效"></a>成效</h2><p>自2018年三月份以来，寝室人均每周运动时间长达5小时。体重逐周递减，可见敏捷运动法初见成效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介于307寝室的诸位纷纷发现自己在2017年，2016年以至追溯到很久以前，都发现自己在慢慢变胖。从而到了2018年，发现身体开始发酵。终于有一天，我们提出了寝室敏捷运动宣言…&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>爱江山，爱摄影</title>
    <link href="http://www.noddl.me/2018/03/20/photography/"/>
    <id>http://www.noddl.me/2018/03/20/photography/</id>
    <published>2018-03-20T04:40:36.000Z</published>
    <updated>2018-03-20T04:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>经某同学的提醒，出的片子，还是要放出来让大伙一起瞧瞧比较好。持续更新着…</p><a id="more"></a><p><img src="http://static.noddl.me/cup.JPG" alt="cup"><br>Strikingly实习时送的杯子，容量特别大，喝满3杯就似乎满足了我一天的需水量。公司有很多这样的杯子，都藏在飘窗边小床的里面。</p><p><img src="http://static.noddl.me/DSC00209.jpg" alt="DSC00209"><br>某同学退还给我的小鹿，我也没地方放，每天抱着睡觉。10月份的时候突发奇想，想让她晒晒太阳，顺便来了一张萌照。</p><p><img src="http://static.noddl.me/DSC00338.jpg" alt="DSC00338"><br>在苏州诚品生活楼顶拍的，当时身边有两个小伙伴，大家一起手忙脚乱地注视着暮色到来。再次他们带我一起玩耍。</p><p><img src="http://static.noddl.me/moon.jpg" alt="moon"><br>健身回来发现有月全食，赶紧借了洞洞的长焦，跟边上一起拍照的同学聊了很久才回去。回去后发现没对好焦，糊了。</p><p><img src="http://static.noddl.me/七号楼.jpg" alt="七号楼"><br>其实一开始我也不相信校园里有这样的建筑的，其实就在七号楼一楼那个小平台，抬头就是。那天临时起意，决定把嘉定校区全部的建筑拍个遍，我认为这是最好也是最出乎意料的一张。</p><p><img src="http://static.noddl.me/西北21.jpg" alt="西北21"><br>也是拍建筑那天，在校园西北角落发现的一栋建筑。</p><p><img src="http://static.noddl.me/刘看山1.jpg" alt="刘看山1"><br>2018年1月25日，上海下了很大的雪。我带着刘看山一起出门看雪景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经某同学的提醒，出的片子，还是要放出来让大伙一起瞧瞧比较好。持续更新着…&lt;/p&gt;
    
    </summary>
    
      <category term="摄影" scheme="http://www.noddl.me/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈事务隔离级别</title>
    <link href="http://www.noddl.me/2018/03/20/transaction/"/>
    <id>http://www.noddl.me/2018/03/20/transaction/</id>
    <published>2018-03-20T03:41:48.000Z</published>
    <updated>2018-03-23T08:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>学数据库的时候，老师就叫我们背事务隔离级别的概念，默写出相应可能会出现的问题。那么究竟在哪些场景下会因为隔离级别的不同而出现这些问题呢。</p><a id="more"></a><h2 id="事务隔离性"><a href="#事务隔离性" class="headerlink" title="事务隔离性"></a>事务隔离性</h2><p>事务的ACID大家自然都背得很熟了，那么隔离性就是定义了数据库系统中一个操作的结果在何时以何种方式对其他并发操作可见。也就是说，数据库多个事务在不同情况下，是区别<strong>并发执行</strong>与<strong>串行执行</strong>的。正因为如此数据库设置了锁的概念，来确保并发控制机制能够有效运行下去。</p><p>所以谈论到的<strong>隔离级别</strong>，通常也与锁设置方式以及锁类型有关。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>为了获取更高的隔离性，数据库系统的锁机制或者多版本并发控制机制都会影响并发。很多数据库定义了不同的<strong>事务隔离级别</strong>来控制其锁的程度。根据标准定义，我们都知道有：未提交读 read uncommited, 提交读 read commited, 可重复读 repeatable read, 可串行化 Serializable。</p><p>虽然中文很拗口，但是这些隔离级别的名字其实是<strong>解决上一个隔离级别所出现问题而提出的解决方案</strong>（除了 read uncommited）。</p><p>他们的区别之一在于锁对于R/W事务上设置的不同，当然最高隔离级别也存在对表锁的设置。</p><ul><li>read uncommited: 不对读事务设置锁；对写事务设置<strong>行级共享锁</strong></li><li>read commited: 对读事务设置<strong>行级共享锁，读完就释放</strong>；对写事务设置<strong>行级互斥锁，直到事务结束才释放</strong></li><li>repeatable read: 对读事务设置<strong>行级共享锁，直到事务结束才释放</strong>；对写事务设置<strong>行级互斥锁，直到事务结束才释放</strong></li><li>Serializable: 所有事务串行执行，读事务设置<strong>表级共享锁</strong>；写事务设置<strong>表级互斥锁</strong></li></ul><p>可以看出来，隔离级别的提高，其实也是锁的严格程度的提高。要知道，相同条件下，锁越多，越严格那么性能也就越低。</p><p>除了脏读以外，其他因为隔离级别导致的问题，<strong>都会出现在当前隔离级别与比当前隔离级别要弱的隔离级别中</strong>。</p><p>共享锁：多个事务对于加了锁的数据，只能读，不能写；<br>互斥锁：排他锁允许当前事物删除或更新一行记录，其他事务不能操作该数据。</p><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>只会出现在read uncommited隔离级别的问题，因为read uncommited不对读事务设置锁，并且对写事务只设置<strong>行级共享锁</strong>。</p><p>示意图如下:</p><p>-T1–T2–R1–W1–R2–T2–T1-</p><p>T2事务全程发生在T1事务的进行时，因为没有对记录设置行级互斥锁，所以在W1写操作进行前后，可以随时读取该记录，导致了R1和R2读到的不一样。非常危险，这就是脏读。</p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>因为读事务在读完一条数据以后(没有结束事务)，就立马释放了行级共享锁，归根结底，就是这一原因导致了不可重复读的发生。</p><p>-T1–R1–T2–W1–T2–R2-</p><p>R1读完就释放了锁，但是T1事务未结束，这时候另外一个T2事务开始了，在T2事务结束前，第一个事务都不能对这条记录进行加锁了(想想为什么)，所以R2要在T2结束后进行。这时候R2读到的数据与R1又不一样了。这就是不可重复读。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>我们都针对<strong>某一记录</strong>读操作与写操作添加锁，并且保证了事务结束时才释放锁了。这是还会有问题吗？</p><p>我们一直只针对某一条记录来进行操作，这时候要是表内又新来了一条数据呢，它可不受任何读写锁的约定呀。</p><p>示意图:</p><p>-T1–R1–T2–C–T2–R2–T1-</p><p><em>R1、R2在这里表示了读整个表的操作</em>，C代表了在T2事务期间，新增的一条记录，你会发现在事务T1内的两次读（R1，R2），得到的数据不一样。</p><p>因为R1只对原有的N条记录加了锁，而没对新增的记录加锁，这就导致T2事务可以与T1事务并发执行，最终导致了R2与R1读到的记录不一致。</p><p>所以我们可以提高事务隔离级别来防止这种情况出现，但是在也就是意味着，事务之间也无并发执行可言了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学数据库的时候，老师就叫我们背事务隔离级别的概念，默写出相应可能会出现的问题。那么究竟在哪些场景下会因为隔离级别的不同而出现这些问题呢。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>静态博客迁移评估</title>
    <link href="http://www.noddl.me/2018/03/19/blog/"/>
    <id>http://www.noddl.me/2018/03/19/blog/</id>
    <published>2018-03-19T01:18:45.000Z</published>
    <updated>2018-03-23T08:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>一开始我所有的站点都部署在Vultr提供的日本VPS下，包括本博客。后来遭不过当初首充的200刀所剩无多，以及遇到奇奇怪怪丢包的网络问题。终于开始了漫漫迁移之路。</p><a id="more"></a><h2 id="第一阶段-自建"><a href="#第一阶段-自建" class="headerlink" title="第一阶段 - 自建"></a>第一阶段 - 自建</h2><p>在VPS下使用了nginx作为web server，无论是在静态资源提供上还是承载力上(其实根本没多少PV)，都表现良好。将静态文件全部推送到Github后，再通知VPS上跑的<a href="http://www.noddl.me/2017/02/21/fish_hook/">fish-hook</a>，及时地把最新内容给拉下来。能够做到热更新，以及一键化操作。</p><p>无奈，遇到了网络问题。于是放弃了这条看似完美的解决方案。😭</p><h2 id="第二阶段-X-page"><a href="#第二阶段-X-page" class="headerlink" title="第二阶段 - X page"></a>第二阶段 - X page</h2><p>作为仓库托管商们，Github、Coding和Bitbucket还提供了Repo pages的优秀服务。每个Repo或Account都能创建属于自己的静态页面，还能享受托管商赠送的二级域名。</p><p><strong>2018年3月19日</strong>，三个服务商提供的服务，我在一晚上全部都试过了，从访问速度、域名绑定、上手难度三个情况进行评估，如下表：</p><table><thead><tr><th>服务商</th><th>访问速度</th><th>域名绑定</th><th>上手难度</th></tr></thead><tbody><tr><td>Github</td><td>慢(大陆部分地区网络无法连接)</td><td>✅</td><td>低</td></tr><tr><td>Coding</td><td>中</td><td>✅</td><td>中</td></tr><tr><td>Bitbucket</td><td>快</td><td>❌</td><td>低</td></tr></tbody></table><ul><li>Github page: 大陆访问较慢经常失败，且部分地区网络压根无法访问。但<strong>提供顶级自定义域名绑定</strong></li><li>Coding page: 访问不流畅，但是不存在失败情况。<strong>提供顶级自定义域名绑定</strong></li><li>Bitbucket page: 海内外访问都极快，但<strong>不提供自定义域名绑定</strong></li></ul><h2 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h2><p>除了上述两种就没有别的选择了吗？当然不是，Heroku、Wordpress、Ghost都提供了免费或收费的服务。还有一些国内的服务商，就不一一列举了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>综上看起来似乎Bitbucket会更好，但是我有一个noddl.me的域名，我可不想浪费它。但是不能绑定自定义域名这一个特点让我无比痛心💔。</p><p>当然了，不排除可能会存在奇技淫巧，让Bitbucket支持自定义域名。隐式跳转是行不通的，因为国内的DNS服务商目前应该都<strong>不支持将域名隐式跳转到未备案的域名</strong>上。</p><p>后来一想，要不直接转战知乎吧？但是一想到知乎的编辑器，又马上放弃了这个念头🤣。</p><p>最终选择了Github，因为我毕竟还是一个热爱填格子的少年。</p><p>最后欢迎访问我的博客: <a href="http://www.noddl.me">http://www.noddl.me</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始我所有的站点都部署在Vultr提供的日本VPS下，包括本博客。后来遭不过当初首充的200刀所剩无多，以及遇到奇奇怪怪丢包的网络问题。终于开始了漫漫迁移之路。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP2特性漫谈</title>
    <link href="http://www.noddl.me/2018/03/18/http2/"/>
    <id>http://www.noddl.me/2018/03/18/http2/</id>
    <published>2018-03-18T12:34:27.000Z</published>
    <updated>2018-03-23T08:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在2018年春招中，没有回答出HTTP2新特性的具体细节，甚是懊恼。看来不能仅仅因为兼容性的问题，就不顾HTTP2这票潜力股😈。</p><a id="more"></a><p>首先概况几个HTTP2相对于HTTP1.1的<strong>新特性</strong>:</p><ul><li>二进制分帧层</li><li>头部压缩</li><li>多路复用</li><li>Server Push</li></ul><h2 id="为什么不是HTTP-1-2"><a href="#为什么不是HTTP-1-2" class="headerlink" title="为什么不是HTTP/1.2?"></a>为什么不是HTTP/1.2?</h2><p>为了实现 HTTP 工作组设定的性能目标，HTTP/2 引入了一个新的二进制分帧层，该层无法与之前的 HTTP/1.x 服务器和客户端向后兼容，因此协议的主版本提升到 HTTP/2。</p><h2 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h2><p>HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。如下图所示，它在应用层里，多定义了一个新的子层：<br><img src="https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg" alt=""></p><p>而HTTP的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的编码方式变了。HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。<strong>但是</strong>！HTTP/1.x 客户端无法理解只支持 HTTP/2 的服务器，反之亦然。</p><h3 id="数据流、消息和帧"><a href="#数据流、消息和帧" class="headerlink" title="数据流、消息和帧"></a>数据流、消息和帧</h3><ul><li>数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。stream</li><li>消息：与逻辑请求或响应消息对应的完整的一系列帧。message</li><li>帧：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。frame</li></ul><p>他们遵循以下的规则:</p><ol><li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。</li><li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。</li><li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。</li><li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 <strong>来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</strong></li></ol><p>所以大致的示意图是:<br><img src="https://developers.google.com/web/fundamentals/performance/http2/images/streams_messages_frames01.svg" alt=""></p><p>简言之，HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。这是 HTTP/2 协议所有其他功能和性能优化的基础。</p><h2 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h2><p>HTTP头是比较长的，如果发送的数据比较小时，也得发送一个很大的HTTP头部。当这种请求数很多的时候，会导致网络的吞吐率不高。并且，比较大的HTTP头部会迅速占满<strong>慢启动</strong>过程中的<strong>拥塞窗口</strong>，导致延迟加大。所以HTTP头的压缩显得很有必要。</p><p>HTTP/2使用了新的压缩方法，在规范<a href="https://tools.ietf.org/html/rfc7541" target="_blank" rel="noopener">RFC 7541</a>进行了说明。关于头部压缩，规范的附录举了个很生动的例子。这里用这个例子做为说明，解释可以怎么对HTTP头部进行压缩。</p><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p>传统的HTTP/1.1为了提高并发性，得通过提高连接数，即同时多发几个请求，因为一个连接只能发一个请求，所以需要多建立几个TCP连接。建立TCP连接需要线程开销，Chrome同一个域最多同时只能建立<strong>6个连接</strong>(考点哟)。所以就有了雪碧图、合并代码文件等减少请求数的解决方案。</p><p>在HTTP/2里面，一个域只需要建立一次TCP连接就可以传输多个资源。多个数据流/信号通过一条信道进行传输，充分地利用高速信道，就叫多路复用（Multiplexing）。</p><p>在HTTP/1.1里面，一个资源通过一个TCP连接传输，一个大的资源可能会被拆成多个TCP报文段，每个报文段都有它的编号，按照从前往后依次增大的顺序，接收方把收到的报文段按照顺序依次拼接，就得到了完整的资源。当然，这个是TCP传输自然的特性，其实和HTTP/1.1没有直接关系。</p><p>那么怎么用一个连接传输多个资源呢？HTTP/2把每一个资源的传输叫做流(Stream)，每个流都有它的唯一编号stream id，一个流又可能被拆成多个帧(Frame)，每个帧按照顺序发送，TCP报文的编号可以保证后发送的帧的顺序比先发送的大。在HTTP/1.1里面同一个资源顺序是依次连续增大的，因为只有一个资源，而在HTTP/2里面它很可能是离散变大的，中间会插着发送其它流的帧，但只要保证每个流按顺序拼接就好了。如下图所示：<br><img src="http://static.noddl.me/15213774079923.jpg" alt=""></p><h2 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h2><p>当我们使用HTTP/1.1的时候，Chrome最多同时加载6个资源。</p><p>虽然使用了HTTP/2没有了只能同时加载6个资源的限制，但是我们发现css或js需要在html解析了之后才能触发加载，而图片如果是通过JS的new Image触发加载，所以它们需要等到JS下载完并解析好了才能开始加载。</p><p>所以Server Push就是为了解决这个加载延迟问题，提前把网页需要的资源Push给浏览器。Nginx是从1.13.9版本开始支持。给nginx.conf添加以下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> = /html/demo/index.html &#123;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/main.js;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/main.css;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">0</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">1</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">2</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">3</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">4</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">5</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">6</span>.png;</div><div class="line">    <span class="attribute">http2_push</span> /html/demo/images/<span class="number">7</span>.png;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如此一来就可以享受预加载带来的页面加载速度上的提升了。</p><p>参考资料:</p><ul><li><a href="https://fed.renren.com/2018/03/18/chrome-http2/" target="_blank" rel="noopener">https://fed.renren.com/2018/03/18/chrome-http2/</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/http2" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/http2</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2018年春招中，没有回答出HTTP2新特性的具体细节，甚是懊恼。看来不能仅仅因为兼容性的问题，就不顾HTTP2这票潜力股😈。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>左左的2018暑期实习面试经历</title>
    <link href="http://www.noddl.me/2018/03/18/interview/"/>
    <id>http://www.noddl.me/2018/03/18/interview/</id>
    <published>2018-03-18T07:13:05.000Z</published>
    <updated>2018-04-13T12:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为在17年就已经面过蚂蚁金服前端岗（据说拿了B+），所以在今年2月左右就收到蚂蚁金服前辈的内推邮件。由于当时在忙着美赛，就没准备投递的事情。转眼就到寒假，化身一枚咸鱼看看龙灯爬爬山，又耽搁了一阵子。直到寒假最后一天，才经过前辈点醒，是时候要开始准备春招了。</p><a id="more"></a><p>开学就马上更新好了简历，分别给阿里腾讯百度(BAT)投递了过去，大致是前端、node、运维岗。心里想着能去做全栈就好了，总不希望做个切图仔的。</p><h2 id="阿里巴巴"><a href="#阿里巴巴" class="headerlink" title="阿里巴巴"></a>阿里巴巴</h2><p>阿里的春招形式与去年没多大变化，文化网测 -&gt; 编程题网测 -&gt; 5、6轮面试，基本就走完了流程，其中应该是4轮技术面 + 2轮HR。</p><h3 id="网测"><a href="#网测" class="headerlink" title="网测"></a>网测</h3><p>文化面不多说，我的价值政治观一直比较正确。接下来就是笔试题，因为当前还在春招时期，碍于泄题之嫌，我就不细说了，总之就是一题，限时30分钟，前端题不难，但是DOM操作要练好。</p><h3 id="一轮"><a href="#一轮" class="headerlink" title="一轮"></a>一轮</h3><p>完成网测后的两天，第一轮电面就打电话来了。3月12日。<br>没有自我介绍，没有项目介绍，直接开始问后端：消息队列、数据库优化、算法、底层网络等等。一口气回答了一堆，然后开始疑惑我投的前端岗位，怎么面这么后端的东西。后来发现是搞错了，因为我的简历里包含了很多后端的东西。🤣</p><p>个人对压力测试玩的比较少，只是了解一下大概。数据结构的考点基本是教科书式的，链表排序之类的。HTTP和RPC，哈希表。</p><p>虽然自我感觉发挥不好，但是面试官却觉得还好。</p><h3 id="二轮"><a href="#二轮" class="headerlink" title="二轮"></a>二轮</h3><p>根据去年的经验，一般是要隔个2、3天，才有下一轮面试。但是没想到3月13日，也就是第二天，下午同一时间，二面开始了。（当时我正要进教室上课呢 😈）</p><p>于是匆匆忙忙下楼，在校园里随便找了一个小草丛开始了第二轮电话面试。</p><p>二轮持续了整整100分钟，因为有一些没有标准答案的水问。</p><ul><li>编辑距离算法</li><li>手写快排</li><li>union sql查询</li><li>DP</li><li>二叉树</li><li>关于Kubernetes服务编排项目的架构</li><li>服务解耦</li><li>数据库优化措施、读写分离之类的</li><li>数据库事务隔离</li></ul><p>也谈了谈敏捷开发，以及我对项目过程的把控。在这两点上，我还是回答得比较好的。关于Kubernetes等用于微服务的技术，基本是根据我简历里写的项目来问。</p><p>最后，透露我可以转到全栈岗，于是下一轮开始由前端组进行交叉面试。我不禁喜上眉梢。</p><h3 id="三轮"><a href="#三轮" class="headerlink" title="三轮"></a>三轮</h3><p>又是一天以后，3月14日。下午2点，一个声音好听的小哥哥开始了对我的在线面试。</p><p>我在简历里写了精通webpack，于是开始让我谈谈webpack的实现机制，以及详细问了css-loader的实现。还让我讲了讲我以前做过的一些plugins，以及babel插件。</p><p>蚂蚁作为React大户，React相关的东西肯定是必考的，redux生态，Virtual DOM。虽然我在期间依然安利了一波Angular，但是效果似乎并不好哈哈😈。</p><p>最后开始手写一个Promise，效果不错。开心地结束了这次面试。</p><h3 id="四轮"><a href="#四轮" class="headerlink" title="四轮"></a>四轮</h3><p>依然是交叉面，但是都是些开放性的问题。例如看什么技术博客、你的强项是什么之类的。与面试官谈了谈我对rxjs的好感度，以及分析了一下medium为什么会火起来 2333。</p><p>因为是在开车的时候被打了电话，一回到寝室也没准备就开始了。气氛很轻松，开心地结束这轮。</p><h3 id="五轮"><a href="#五轮" class="headerlink" title="五轮"></a>五轮</h3><p>依然交叉面前端，但是更多是谈谈做过了哪些项目。我讲了讲微服务相关的项目，以及webpack遇到的坑。据悉下一轮就是HR面啦。</p><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><p>怪不好意思的，投腾讯的时候很粗心，不小心把去年的low简历投了过去。导致了尴尬。</p><p>去年其实也投了腾讯，而且是内推。但是愚人节那天去了崇明岛玩，没带电脑。下午的时候手机收到要笔试的通知，自然是翘了。于是就没有后续了。</p><p>今年没有找内推，野投。有趣的是，很快有了回应，并告诉我周六去上海腾讯总部面试。</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>3月17日。感慨一下腾云大厦离我校好远。</p><p>接待我的是一个笑起来甜甜的小哥，坐下后马上开始做笔试题。大致是50道左右的多选题，从操作系统、C++、算法、前端、网络、数据库应有尽有。关键还是多选题，是一场苦战。</p><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>差不多做到最后一题，我的面试官到了。笑容小哥哥在边上改我的卷子，面试官开始面我。</p><p>先自我介绍，然后：</p><ul><li>用户体验优化</li><li>浏览器机制</li><li>HTTP2</li><li>webpack</li><li>旧项目改造，与我在前东家做的rails改造很像</li><li>项目选型考虑</li></ul><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>二面以node为主</p><ul><li>Stream</li><li>express middleware实现</li><li>单线程调用栈，以及优先级</li><li>webpack</li><li>DNS实现</li></ul><p>看得出来，小哥哥对我还是挺满意的。更多题目我也忘记了，印象深刻的就这么几个。</p><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>胡子小哥哥坐镇，让我谈谈HTTP2，我背了一些新特性，但是说不出所以然。<br>还有前端如何做一款类似于美图秀秀的图形处理程序。</p><p>三面比较短，说实话，我答得不好。因为确实缺少相关的经验。</p><h3 id="最终面"><a href="#最终面" class="headerlink" title="最终面"></a>最终面</h3><p>结果挺理想，跟我谈了谈该团队目前在做的事情。Typescript讲了讲。具体结果还是要看我后续的更新吧。</p><h3 id="复试"><a href="#复试" class="headerlink" title="复试"></a>复试</h3><p>3月23日下午，被通知要去参加复试…</p><p>恐怖的压力面，boss全程看电脑。技术倒是不难，就是氛围有点儿紧张。让我这个老油子也有点活泼不起来。</p><p>继续等下一轮吧。</p><!--## 摩根士丹利那天刚好看见摩根在电信学院宣讲，就去听了一下。虽然场子不大，但是大家都很真诚的样子。找了HR要了内推，于是直接投出了简历。### 电话面试可能是因为内推吧，就没有笔试环节，直接一个电话打来，告诉我第二天有面试，**全英文**。本着对自己的口语抱有无可救药的态度，完全没有如何复习，到了第二天。一个小哥哥打电话来的，电话线路不太好，很声音模糊，配上英文简直可以说是让我发抖了。我讲了讲自我介绍，随后马上进入了他的回合：- OOP介绍一下- 反射- 设计一个Web页面- 等等等都是特别特别简单的问题（如果是中文的话😭）。让我介绍OOP，中文我可以聊一下午。英文我就比较简练而无能为力了。最后谈谈我的项目的时候，我讲了半天kubernetes和microservices，然后断断续续地没讲清楚。时间到了还没讲完，中途就被掐掉了。我以为没有下一面了，结果呢...### Onsite结果就是过了两周，到了摩根公司onsite。在花木路，离我校不近，轨道交通令我哭泣。办公楼内部设计让我感到了设计师的不友好，进门之后，全是西装革履的面试者让我这个蓝色马甲少年感觉压力巨大。都穿着西装+皮鞋，而我是马甲+帆布鞋。都是硕士，而我是本科。我能进这个门真是万幸呢，挂了也值了。在HR简单介绍之后，大家一起做了35分钟的手写编程题，3道题，简单，但是我似乎做错了好多。随后进入办公室开始单独面试（**当然全英文**😈）### 一面我真的是作死，我不小心顺带提了一下最近在做区块链的项目，于是接下来的一半时间都在讨论区块链：化身金融巨鳄，在摩根N层楼的水晶办公室里，大论未来经济走势，小时代电影的感觉让我恍恍惚惚。（编不下去了）在聊完区块链之后，开始批判我做了题，思路错了，说我不看题，一看就是刷题刷多了。随后让我设计一个页面，easy。### 二面让我设计一个SPA，包含ajax之类，easy。让我设计一套物理机与虚拟机资源分配的问题-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为在17年就已经面过蚂蚁金服前端岗（据说拿了B+），所以在今年2月左右就收到蚂蚁金服前辈的内推邮件。由于当时在忙着美赛，就没准备投递的事情。转眼就到寒假，化身一枚咸鱼看看龙灯爬爬山，又耽搁了一阵子。直到寒假最后一天，才经过前辈点醒，是时候要开始准备春招了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Kubernetes与Istio的微服务结构设计</title>
    <link href="http://www.noddl.me/2018/01/24/microservice/"/>
    <id>http://www.noddl.me/2018/01/24/microservice/</id>
    <published>2018-01-23T17:14:00.000Z</published>
    <updated>2018-03-18T12:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然选择了17年秋季的<strong>Web与SOA课程</strong>，虽然SOA与微服务有着很强的联系，而且课程名字也叫SOA，但是在课后进行的都是与微服务有关的研究与编码。在这期间，查阅了多方资料，看了许多知名架构师的演讲视频以及分享的幻灯片，自己也产生了很多奇思妙想。归根结底，就是为了解决自己对微服务架构设计方面所产生的疑问，而做的这一切工作。写文记录这一过程。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>学一样新事物之前，在我未踏足这个领域时，我热衷于找到名人给这一事物下的权威定义。在踏足之后，再根据自己的理解进行补充（以及<em>自我说服</em>🤣）。</p><p><a href="http://microservices.io/" target="_blank" rel="noopener">Microservice Architecture</a>这个网站光是从域名上，就给我一种靠谱踏实的感觉。大大的标题: <code>What are microservices?</code>以及回答就足以给萌新关于微服务一个很好的定义: Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of loosely coupled services, which implement business capabilities. The microservice architecture enables the continuous delivery/deployment of large, complex applications. It also enables an organization to evolve its technology stack.</p><p>翻译一下: 微服务，也就是所谓的微服务架构。是一种将应用程序构建为一系列松散耦合服务的架构风格，以此来实现业务功能。微服务架构使得大型、复杂的应用在持续分发\部署上成为可能。它也使得一个组织能够发展其技术栈。</p><p>果然够官方，我喜欢。虽然一点都不懂😑。</p><h2 id="Kube概念"><a href="#Kube概念" class="headerlink" title="Kube概念"></a>Kube概念</h2><p>因为玩过Docker compose &amp; Docker swarm，所以其实可以将它们与kube的一些概念进行映射起来。Kubernete的基础概念可以参考<a href="https://www.gitbook.com/book/feisky/kubernetes/details" target="_blank" rel="noopener">Kubernetes指南</a>来进行学习，但是不能只记而不去操作。</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然选择了17年秋季的&lt;strong&gt;Web与SOA课程&lt;/strong&gt;，虽然SOA与微服务有着很强的联系，而且课程名字也叫SOA，但是在课后进行的都是与微服务有关的研究与编码。在这期间，查阅了多方资料，看了许多知名架构师的演讲视频以及分享的幻灯片，自己也产生了很多奇思妙
      
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="microservice" scheme="http://www.noddl.me/tags/microservice/"/>
    
      <category term="kubernete" scheme="http://www.noddl.me/tags/kubernete/"/>
    
      <category term="istio" scheme="http://www.noddl.me/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>你有什么道理后悔没有早点知道？</title>
    <link href="http://www.noddl.me/2017/11/21/thermos/"/>
    <id>http://www.noddl.me/2017/11/21/thermos/</id>
    <published>2017-11-20T16:20:00.000Z</published>
    <updated>2018-03-18T16:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>小时候，距离我家不远处开了一家热水房，我每天放学都要跟妈妈去打热水。</p><p>人们提着大大小小的热水瓶，站满小小的热水房。</p><p>大瓶4毛钱，小瓶2毛钱。</p><p><br></p><p>我家有一只外观特别的热水瓶，</p><p>带有花的纹理，似乎还有一个少女的面庞印在上面。</p><p>它比其他的热水壶小一圈，所以总是由我来负责拎它。</p><p><br></p><p>我记得那是一个冬天，天暗特别早，热水房门口早早排满了人。</p><p>放学后我照常与妈妈去打水。</p><p>小的时候，我陪妈妈的时间还是非常长的。长到我天天念叨地想长大。</p><p><br></p><p>妈妈怕开水烫到我</p><p>每次轮到我们的时候，都是由她来接水。</p><p>所以每一次我都会站在一旁看着妈妈操作，看着她的侧脸。</p><p>现在回忆起来，那个时候的妈妈真的好年轻</p><p>还留着长发，没有烫，没有卷。</p><p>她轻松地提起两只热水瓶，同时打开两个出水口。</p><p>滚烫的开水源源不断送入瓶中，还伴随着白白的热花花，还有呼呼的声音。</p><p>快满的时候，音调会越变越高</p><p>妈妈及时按下木塞子，并齐嗖嗖地把两个热水瓶同时拿到下面，让我提着。</p><p><br></p><p>那个时候的妈妈，干练的样子</p><p>让我感觉到天底下没有事情是我妈妈搞不定的。</p><p>她就是这么的伟大，无敌。</p><p><br></p><p>那天的天真的好黑啊，明明时间还很早。</p><p>我们打完热水，照常就回了家。</p><p>走在楼梯上的时候，还是有说有笑</p><p>直到我感觉右手的热水瓶，被什么东西磕了一下。</p><p>就听见一声巨响，之后地上塞满了水，散着热气。</p><p><br></p><p>哦，热水瓶的瓶胆破了呢。</p><p>到时候再去买一个就好了，我简单地想着。</p><p>妈妈回头看了一眼，表情似乎变得很古怪。</p><p>她什么都没说，快步走到家里。</p><p><br></p><p>回到家里，我终于知道为什么天这么黑了，</p><p>原来是小区停电了。</p><p>我在证实确实停电后，跑到厨房问妈妈晚餐该怎么办。</p><p><br></p><p>可是却发现妈妈趴在餐桌上，埋着头</p><p>像极着我那个同桌被我欺负后的样子。</p><p>妈妈此时不是应该笑着带我出去吃饭的吗？</p><p>她…她怎么了？</p><p><br></p><p>我开始不停地询问妈妈怎么回事，是不是身体不舒服。</p><p>她只是摇头，依然没有抬起头。</p><p>我静静地坐在边上等着她，满头雾水。</p><p>然后她就发出哭声，抬起了头，满脸泪痕。</p><p><br></p><p>我一看妈妈哭了，马上就慌了，跟着哭。</p><p>我无敌的妈妈哭了，我怎么办？</p><p>我一边哭，一边还是问，妈妈你怎么了。</p><p>也不知道过了多久</p><p>我听见她断断续续地说：『这是我妈妈送给我结婚礼物』</p><p><br></p><p>原来我打破了外婆送给她的礼物。</p><p>原来她从小就喜欢这个特别地热水瓶</p><p>常常追着外婆问什么时候能把这个热水瓶送给她。</p><p>外婆说：『你出嫁了，我就把它当做特别的礼物送给你』</p><p><br></p><p>我无敌的妈妈，居然为了一个热水壶哭了。</p><p>她经历了这么多，都没有难倒她，为什么为了一个热水瓶哭。</p><p>只是因为外婆送给她礼物，可是只是一个普通的，寻常的热水瓶。</p><p>当时的我不懂，跟着哭，只是因为妈妈哭了。</p><p>当时的我不懂，这个东西对于她来说有多么重要。</p><p>之后的我依然不懂，为什么同班一个软弱的同学，可以为一只被折断的笔变得凶狠。</p><p><br></p><p>在无意破坏家里早已积灰的一件物品后，父母对我表达原谅的笑脸背后，又藏着多少回忆的消散呢？</p><p><br></p><p>你有什么道理后悔没有早点知道？</p><p>外婆已经走了这么久了，我才回想起来她留下的礼物。</p><p><br></p><p>你有什么道理后悔没有早点知道？</p><p>父母在不经意的瞬间，也有孩子的一面，而我们却残忍地伤害了他们那么久，</p><p>当年的孩子们还是孩子，只不过是成了别人的父母而已。</p><p><br><br>时光时光啊，请你对我们的大姑娘再温柔些吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;小时候，距离我家不远处开了一家热水房，我每天放学都要跟妈妈去打热水。&lt;/p&gt;
&lt;p&gt;人们提着大大小小的热水瓶，站满小小的热水房。&lt;/p&gt;
&lt;p&gt;大瓶4毛钱，小瓶2毛钱。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;我家有一只外观特别的热水瓶，&lt;
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>与Strikingly的各位一起度过的实习时光</title>
    <link href="http://www.noddl.me/2017/09/25/intern_in_strikingly/"/>
    <id>http://www.noddl.me/2017/09/25/intern_in_strikingly/</id>
    <published>2017-09-25T11:32:00.000Z</published>
    <updated>2018-03-18T11:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>你问我是要做泰坦尼克的螺丝钉，还是做帆船上的桅杆。</p><p>在Strikingly度过了为期两个多月的实习，没想到那么快就要离开了。在实习期间，我晚上回到宿舍，都会回想今天学到了什么，为团队作了哪些贡献。令我惊喜的是，几乎每天都是收获满满，无论是在人际上，还是技术上。<br><a id="more"></a></p><p>回忆面试的时候，冲着Frontend intern去面试的。面试我的是帅气的达峰，他在之后也一直担任我的导师。因为当时也在同时进行阿里的面试，所以也会在心里进行对比。阿里面试注重知识面的广度，而Strikingly注重深度，希望面试者能在某一个问题上有着自己的见解与实践。</p><p>特别好玩的是，达峰在最后问我：<strong>“我这里有一道简单的题和一道难的题，你选哪一个？”</strong>。还没等我回答，他就马上说：<strong>“嗷，你选难的！”</strong> 😂</p><h2 id="扁平化管理"><a href="#扁平化管理" class="headerlink" title="扁平化管理"></a>扁平化管理</h2><p>每个人都有自己的Task列表，而不是由一级级的管理层下达任务，来告诉你应该做些什么。但是在Onboarding的时候，还是需要按照Bootcamp的规则来一步步做的，为的是熟悉团队的业务以及办公流程。当然作为实习生，我还是希望达峰能布置一些任务给我的。</p><p>大家都能像朋友一样，只有在正经忙工作并且产生分歧时，才会展现出在团队中的话语权。其他时候，都是在和睦地讨论着，博采众长以获取一个best solution。</p><h2 id="阿姨，能多夹一块肉给我吗"><a href="#阿姨，能多夹一块肉给我吗" class="headerlink" title="阿姨，能多夹一块肉给我吗"></a>阿姨，能多夹一块肉给我吗</h2><p>包三餐算是企业文化特色么？伙食并不是在办公室烧制的，但是每次打饭阿姨拿着一锅锅饭菜来的时候，真的都是热乎乎的。</p><p>每次到饭点，阿姨就会在办公室里打铃, <strong>“Duang”</strong>的一声，大家都立马化身<strong>立着耳朵的猫</strong>，成群结队跑到16F去会餐。此时16F会议厅就摇身一变，变成一个大饭堂，大家排着长长队伍，等着阿姨发<strong>稀有菜</strong>。</p><p>什么是<strong>稀有菜</strong>呢？就是因为数量限制而限量发放的菜肴。我会说我每次都会厚脸皮地求阿姨给我多夹一些么。</p><p>夹完菜之后，大家都会站着吃，所以<strong>站着吃</strong>也算是我们的企业文化特色么?这个时候无数思维碰撞出的火花就会迸发，谁说程序员不善言谈的？就算饭菜都被吃完了，也不急，要先把想法说清楚才罢休。许多产品、设计小姐姐都待在16楼，然而大家都似乎都不把握这个上楼的机会的样子。</p><h2 id="Demo-Time！"><a href="#Demo-Time！" class="headerlink" title="Demo Time！"></a>Demo Time！</h2><p>每周五在午饭后，我们帅气的陈海沙CEO大大，就会召集大家开一个一周新产品新功能演示会。我因为是做基础设施工作的，在职的两个月，只有幸上台讲过一次，感觉大家都被我口语弄得云里雾里（大雾</p><p>这个时候，各路大神就会迫不及待大谈自己过去一周做的工作成果。各种飙英语，各种专业术语，以及满满的自信覆盖全场。正是因此，我们的产品才会推进的如此之快，一个个功能背后都是一场场Demo time，怀揣着大家的汗水online的。</p><h2 id="Awesome-Tech-Stack"><a href="#Awesome-Tech-Stack" class="headerlink" title="Awesome Tech Stack"></a>Awesome Tech Stack</h2><p>好吧，回到我的major field。虽然入职后所在的工作与Frontend intern这一身份不一致，基本是在做前后端分离架构这方面的时期。但是作为一个前端的眼光来看项目，Strikingly所表现出的，对前沿技术的稳定性与创新性的追求还是非常有劲头的。<strong>React</strong>以及周边生态，包含Webpack打包自主研发的测试框架。当然不能就这样算了，Strikingly作为一个建站平台，对于追求客户的体验，已经到了淋漓尽致的地步。所以我们每次的代码改动，都要<strong>对endpoint负责</strong>。</p><p>所以团队内部开发了许多监测工具，对于子站的实时监控，以及多套线上版本部署策略，CI工具以及hotfix机制，都非常具有前瞻性。（我司还是webpack的主要资助商之一哟</p><h2 id="没有把网站弄糟过的员工不是一个cool员工"><a href="#没有把网站弄糟过的员工不是一个cool员工" class="headerlink" title="没有把网站弄糟过的员工不是一个cool员工"></a>没有把网站弄糟过的员工不是一个cool员工</h2><p>达峰跟我说：“改基础设施，就要润物细无声，不然全团队都要追着你打。”然而我依然在过程中没有做到润物细无声😁，导致了非常多的问题，这些问题大多都在QA环境以及本地开发环境被解决了。但是依然有一部分，因为疏忽到了production，影响到了全站。比如CSS文件体积突然地暴增，大了400%哟。还有因为autoprefixer功能browser list没有设置到位，导致一些浏览器的兼容失效等等。</p><p>发生了这些事情，显得我非常unprofessional，其实场面一度变得非常尴尬（比如我少了一几个逗号引发的compile error😂）。但是依然十分感谢达峰以及各位的谅解与支持！~ 在Strikingly的支撑下，我也在不断地成长。</p><h2 id="Wow，Hackathon"><a href="#Wow，Hackathon" class="headerlink" title="Wow，Hackathon"></a>Wow，Hackathon</h2><p>是后话啦，开发了一个微信小程序与支付宝小程序的工具，等我写好技术博文，就放出链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你问我是要做泰坦尼克的螺丝钉，还是做帆船上的桅杆。&lt;/p&gt;
&lt;p&gt;在Strikingly度过了为期两个多月的实习，没想到那么快就要离开了。在实习期间，我晚上回到宿舍，都会回想今天学到了什么，为团队作了哪些贡献。令我惊喜的是，几乎每天都是收获满满，无论是在人际上，还是技术上。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="实习" scheme="http://www.noddl.me/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>小题大做的防范</title>
    <link href="http://www.noddl.me/2017/09/16/on-guard/"/>
    <id>http://www.noddl.me/2017/09/16/on-guard/</id>
    <published>2017-09-16T06:44:00.000Z</published>
    <updated>2018-05-05T16:34:28.218Z</updated>
    
    <content type="html"><![CDATA[<p>有些事情只是很少或者没有人去做罢了，一旦有人去做，就是畅通无阻。当然，以上说的“事情”对于绝大部分的人而言肯定不是什么好事。<br><a id="more"></a></p><h2 id="上海信号灯"><a href="#上海信号灯" class="headerlink" title="上海信号灯"></a>上海信号灯</h2><p>7月到10月，我在位于五角场的Strikingly公司实习，每天上下班都要骑着电动车在政修路上往返。还记得大一暑假也是这样顶着烈日在这条被同济人成为“绿色通道”的路上飞驰，只不过当时骑的是自行车。</p><p>可能居住在附近，或是与我有同样上下班路线的人会知道，在政修路与内环高架路有一个十字路口，红绿灯留给行人与非机动车通过的时间只有短短20秒。我发现有人很多人因为等待不了超过一百多秒的红灯时间，而选择闯红灯。<code>一步三回头</code>式地紧张闯过红灯。</p><p>但是我发现这样往往很安全，可能很多人会反驳我说：<strong>“啊 为什么闯红灯会是一件安全的事情呢？”</strong></p><p>那我们先不提那些闯红灯人的姿态，我们先来回忆一下如果是绿灯，而且是顺通无阻的情况下（并非停下等待后出发），这种情况下你身边的路人是怎么做的呢？</p><p>大多都是以保持原速或是略有减速的情况下通过的吧？尤其是在绿灯变黄灯的过渡时间，车速可能甚至还会往上提一提。恰恰在这个时间，相邻的车道交通信号灯变为了绿色，而你的是黄灯或是已是红灯，双方在十字路口相遇，最终肉包铁的上了天，铁包肉的蹲了牢子。</p><p>那么我见过的闯红灯的人又是怎么做的呢？他们明知道对面是绿灯，而且很可能会有车驶来，于是在属于自己的安全路口就停下东张西望，确保在自己通过路口的时间内没有车，再慢慢通过。</p><p>当然我这个例子是非常不具备说服力的，只是我对我身边的观察而有感而发。我只是想说：不要以为是绿灯就畅通无阻了，不要以为遵守了交通信号就可以高枕无忧了。陷入对规则的无限信任从而放松了警惕而带来的危险性，还不如那些闯红灯的人。</p><h2 id="上海地铁"><a href="#上海地铁" class="headerlink" title="上海地铁"></a>上海地铁</h2><p>上海地铁有潜规则，是这样的：除了双肩包、拉杆箱以外的东西，一切不用过<strong>安检x光机</strong>，还有，<strong>蛮横的人不用受安检</strong>。</p><p>我们的城市是非常安全的，虽然没有人天天给你宣传这些，但是你也和我一样是能从骨子里感受到这座城市给我们带来的保护，对吧？</p><p>那些每天早上就开始站在地铁口负责安检的同志，你每天都会看见他们，他们在工作，你就知道地铁通道里是安全的。只要你看见牛奶上有贴着绿色标识，受到了协会的认可，你就知道你所喝的牛奶是有保障的。</p><p><strong>我们相信着这座城市，相信它能给我们带来保障。但是它确确实实有一些地方依然没有做到完美，我一开始以为是管理上不可避免的缺失，后来才渐渐意识到，不是的。</strong></p><p>投入更多的人力物力去做到万无一失，与不如就高速发展，等到有能力了，再去解决这些次要的，低概率的问题。这是我们的策略，这是我们这个时代的策略。</p><p>我认为，陷入很深的安全感之中，一旦低概率事件发生，那么将会非常可怕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些事情只是很少或者没有人去做罢了，一旦有人去做，就是畅通无阻。当然，以上说的“事情”对于绝大部分的人而言肯定不是什么好事。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="随笔" scheme="http://www.noddl.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>装病怪谈</title>
    <link href="http://www.noddl.me/2017/09/14/malinger/"/>
    <id>http://www.noddl.me/2017/09/14/malinger/</id>
    <published>2017-09-14T02:50:40.000Z</published>
    <updated>2018-03-18T12:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>当然，我不是在装病，我是在进行一场经过精心筹备的演出。<br><a id="more"></a></p><p>要问我在初中究竟学到了些什么</p><p>莫过于集请假大法于一体</p><p>毕竟社会需要多功能复合型人才嘛<br><br><br>初中请假机制极其苛刻</p><p>小打小闹都瞒不过老师</p><p>事假一般不批</p><p>从而习得一身装病奇术</p><!-- more --><p>应对一般老师</p><p>口水化痰这招绰绰有余 再配上几声湿湿的咳嗽</p><p>可谓惟妙惟肖 栩栩如生</p><p>此招经过我的推广 在班里早已烂大街 智者不应与之共伍</p><p>装病要诀在一个“诚“字 患者的痛苦不仅由嘴上说出 更要写在脸上</p><p>表演开始之前忌体育运动 更大讳饱餐烂食</p><p>在此基础上再配合清水洗面 浓涂防晒霜于小脸蛋</p><p>彩排三番 举止轻柔 静若处子 为的是骗人骗己</p><p>演出筹备关键在掌握病理</p><p>我所创立的几大奇招皆建立在发生的事实上</p><p>即 我以前得过这种病或类似的病</p><p>化屎为稀术 便是其中最为典型的例子</p><p>腹中之物与脑中之疾 皆不可视</p><p>是最好的病因说辞</p><p>稀自昨日始 如厕至今已有六七</p><p>今早病情最甚 吃红见红 食绿拉绿</p><p>虽自备急药 却效果平平</p><p>如今以绝食为招 故腹中无物 症状略退</p><p>吾已食药甚多 又以养息为辅 验血无恙之因或出于此</p><p>恐日后隐患于学业 望赐病假条</p><p><br>&gt;</p><p>班上的某方姓同学清楚地了解到自己易上火的体质</p><p>在决定要请假回家打游戏后</p><p>毅然选择在小卖部当场吞下十包辣条</p><p>果不其然 他如愿以偿 只是花去了医疗费</p><p>从此辣条封喉一术成为他毕生绝学</p><p>但这种招数被我所不齿</p><p>为何</p><p>装病请假同样讲究一个“装”字</p><p>真的有办法搞生病 目地虽已达到 却又得不偿失了</p><p><br></p><p>到了时机成熟时 观众到场 演员就位</p><p>演出进行 语速放慢 放慢再放慢  但千万别结巴</p><p>目光如炬 紧盯老师双眼 真诚而又无助</p><p>若是老师无动于衷 俨然一副看透你的老司机模样</p><p>莫慌张 只需静静等待不必张口 大艺术家言多也有失</p><p>沉寂几个世纪后 老师终于缓缓开声</p><p>无非 你何病 病几何 病假条何在</p><p>好个“三何”攻势 可惜你已将套路烂记于心</p><p>滔滔昨日所学病理 谈谈病患之苦痛</p><p>有气无力 却不矫揉造作</p><p>使自己成为心有力于学习而力不足的悲怆斗士</p><p>抒发自己近日所受的病魔缠身之创</p><p>同样 别忘了时不时展示一下你的小白脸</p><p><br></p><p>装了几十次病 以为自己天下无敌</p><p>心高气傲 在请假界目中无人</p><p>若诸君心中起了此念</p><p>不妨抽空问问班上成绩第一的同学是如何请假的</p><p><br></p><ul><li><p>“老师，我想回家洗澡。”</p></li><li><p>“好，你家在哪，老师送你回去。”</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然，我不是在装病，我是在进行一场经过精心筹备的演出。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="生活" scheme="http://www.noddl.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Oracle填坑 - 安装</title>
    <link href="http://www.noddl.me/2017/04/06/oracle-install/"/>
    <id>http://www.noddl.me/2017/04/06/oracle-install/</id>
    <published>2017-04-06T13:53:00.000Z</published>
    <updated>2018-03-18T11:53:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>17年软件学院有一门课程，指定要学生使用oracle数据库作为项目开发使用。那么oracle在安装的时候究竟有哪些坑呢。<br><a id="more"></a></p><p>首先我们要有一个Windows server主机，腾讯云就可以申请到。于是我们根据分配的公网IP地址远程登录上去。登录完成界面是这样的(2012RC) <img src="http://static.noddl.me/c9b8425f0c0ad59410035b85b7cf5fd5034100f4-0c378c8527346e1f3fcee1ead00355e4a6e1255b.png" alt="windows"></p><p>打开普通的IE浏览器，然后接受来自同济大学的小邱神的加速下载助攻: <a href="http://45.55.22.41/" target="_blank" rel="noopener">oracle下载</a>。下载地址随时都可能会失效，流量挺烧的，各位答应我，给他捐款好吗？</p><p>运气好的孩子会获得这两个zip压缩包(oracle1, oracle2)。<img src="http://static.noddl.me/41f1f97a276bd0c580cf206fe852706de2894e5f-d84d8ccb29241282a6cfe3c0238c57b6a3425a39.png" alt="oracle12">它们里面都有一个叫<strong>database</strong>的目录，请分别解压出来，然后合并成一个<strong>database</strong>目录(<em>如果你还没看懂并且很巧地做错了，那么接下的安装你一定不会成功</em>)。</p><p>我们进入<strong>database</strong>目录，可以看见这番光景。<img src="http://static.noddl.me/4f0d21e6a791dcf68fb9c2ba6bf2fa226e045585-725f5b2fa23a317f728a441ec34a0609fb127204.png" alt="database"></p><p>运行setup.exe进入安装程序。有一个小黑框别理它，之后的步骤请静下心平静地跟我一步步走完。<strong>千万别忙着等下一步哦</strong>，先去把计算机名给改了，起码不能有下划线等等一些特殊的字符。教你怎么改计算机名的任务我就委托给google吧。改好了以后，我们进入下一步(<strong>其实要先重启一下才行</strong>)</p><p><img src="http://static.noddl.me/4132ee3f17b75adb76b91c7646203aa37a430262-cd36dd1d3d7ce7c6249b8fe31bfcace735d4805d.png" alt="email"></p><p>点击下一步，然后你就会进入漫长的，可能长达半小时的等待中。<em>这个时候鼠标不要动点西点</em>，否则你会搞砸接下来的所有事情。这个时候你可以泡个茶看个剧，静静等待它进入下一步。</p><p>按照我的印象(因为我写博客的时候实在懒得等30分钟)，应该是配置全局数据库以及添加新账户了。选择第二个添加新用户，账户名与密码(复杂点)自己定。全局数据库名就叫<strong>orcl</strong>不要去改它了，密码最好跟刚刚的账户密码保持一致。然后就可以一直点下一步了，如果卡着了就等着。</p><p>然后oracle安装程序会进行安装前的最后检查，如果你的内存&lt;=1G，它会报一个warning，别理会它，直接点右上角的<strong>全部忽略</strong>然后进入安装步骤。安装这个过程会持续很长时间，<strong>并且会伴随一系列的错误发生(你没有仔细看前面教程的苦果)</strong>，所以你最好盯着。错误了以后就回过头仔细看看有没有哪里没做对，如果安装成功该程序应该就关闭了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;17年软件学院有一门课程，指定要学生使用oracle数据库作为项目开发使用。那么oracle在安装的时候究竟有哪些坑呢。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="oracle" scheme="http://www.noddl.me/tags/oracle/"/>
    
      <category term="database" scheme="http://www.noddl.me/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>极限优化js加载阻塞</title>
    <link href="http://www.noddl.me/2017/03/12/script/"/>
    <id>http://www.noddl.me/2017/03/12/script/</id>
    <published>2017-03-12T03:01:00.000Z</published>
    <updated>2018-03-18T12:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>万年被提起的老题：”同学，浏览器是如何加载一个页面哒？”<br>好吧，你要我从<em>浏览器识别URL</em>到<em>DNS(各种机制)获取真实IP</em>说起呢？还是从<em>建立TCP连接</em>(各种繁琐的特性以及与UDP的区别)到<em>web服务器处理GET请求</em>说起呢？其实我今天要到特别说的是，从服务器发回index.html，浏览器获取到html数据那一刻开始。<strong>大部分浏览器</strong>是如何做的。</p><a id="more"></a><h3 id="我知道你肯定会说DOM树什么的"><a href="#我知道你肯定会说DOM树什么的" class="headerlink" title="我知道你肯定会说DOM树什么的"></a>我知道你肯定会说DOM树什么的</h3><p>别先急着说浏览器会建立DOM树，不过我今天也肯定不是来普及什么是DOM树(<a href="https://en.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener">Document Object Model</a>)的。但是也不能随随便便说: <code>啊~浏览器建立DOM树，DOM树建立好了，DOMContentLoaded事件触发啦，document is ready。</code></p><p>思考：<code>如果你做一个浏览器解析DOM的程序，会怎么做呢？</code> 当然是建立树结构，<code>&lt;html&gt;</code>标签为根，然后递归创建子节点等等等等。这很nice，起码你不会对此表示茫然。</p><p>我们假设你的程序解析到了<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://www.example.com/main.css&quot; /&gt;</code>这个标签，你的程序发现这个样式表是要从互联网(其他网站)中加载的，聪明的你肯定早就想到了这种情况，于是你就让浏览器开始下载这个样式表。<strong>这个时候问题来了！</strong></p><!-- more --><p>浏览器下载这个样式表的时候，<strong>我们之前DOM解析工作要不要继续进行下去呢？</strong>但是简单一想，能并行就并行处理任务嘛，这样我们DOM解析工作能不会被阻塞了喵。<em>于是你让浏览器新开了一个线程来负责样式表下载工作，而负责DOM解析的老线程继续进行下去了。</em></p><h3 id="该死的script标签"><a href="#该死的script标签" class="headerlink" title="该死的script标签"></a>该死的script标签</h3><p>接下去的工作很顺利喵，一路都是普通的例如<code>p div section</code>的DOM节点，畅通无阻。突然！你发现了一个<strong>该死的script标签</strong>(因为做浏览器的同胞都说它很该死)。老样子，script标签长成了这个熊样子：<code>&lt;script src=&quot;http://www.example.com/main.js&quot; /&gt;</code>，你要去互联网(其他网站)加载这个js。</p><p>哈哈太简单了，我开一个新的线程让它去加载这个js就好了啦，根本不妨碍我解析剩下的DOM。但是你有没有想过：<strong>js代码可能会修改DOM</strong>(如果你写过前端逻辑的话)，如果在JavaScript执行的同时还继续进行页面的解析，那么整个解析过程将变得难以控制，解析出错的可能也变得很大。</p><p>你冷静地思考了一下:  <code>js代码执行会影响DOM这点没错，但是我先下载，不执行总没问题吧？</code>。太棒了，<strong>async属性</strong>就是为你量身定做的，现代浏览器也考虑到了这一点，所以支持了async attribute，<code>&lt;script src=&quot;http://www.example.com/main.js&quot; async /&gt;</code>这样就可以让js下载与DOM解析并行啦。但是实时上，你有没有考虑过：<strong>“既然是异步，下载完毕后，各个js执行的前后顺序是怎么样的呢？”</strong>没错，如果使用async特性，那么js的执行顺序将无法被保证。比如的你写的main.js依赖jquery，如果你的main.js也被加载成功了，而此时jquery没有被加载完成，Boom 报错！。(当然，我们可以使用一些AMD loader来解决这个问题)</p><h3 id="Async真的是async吗"><a href="#Async真的是async吗" class="headerlink" title="Async真的是async吗"></a>Async真的是async吗</h3><p>使用了async特性的你，让DOM解析工作进行到了最后。但是，真的是这样吗？<strong>这里存在一些情况</strong>：</p><ul><li>某个js文件在DOM解析完成之前也下载好了，那么它将被执行</li><li>DOM解析完毕，js文件一个个被下载好，执行它们</li></ul><p>第二种情况是你最希望看见的，而第一种情况你也无法避免：js文件执行会阻塞DOM解析工作(原因之前讲过)。所以需要指出，异步加载js文件，并不是异步执行js文件，一旦js文件加载完毕，就会执行并且阻塞DOM解析。阻塞了DOM解析意味着后续的layout、paint工作也就延缓了。</p><p><img src="http://static.noddl.me/76d0c3ebfe277d7fe5c8c4c82e9df018205c5235-8b17090956ca73d3334aecef10e076438f0d4818.png" alt=""></p><p><img src="http://static.noddl.me/902db22f9ece1de11109060109acc4defa26886a-8db9fae2c938fc16b19d54afa95806d77f3477e9.png" alt=""></p><p><img src="http://static.noddl.me/a0d9e158312b7b9a55bb71cf9718873345ec3660-ca9f80e6b043315ab8e3af3a798346c0d791c8db.png" alt=""></p><p>可以轻易地从图中看出，即使加了async，js文件被异步下载，但仍然摆脱不了阻塞DOM解析的命运（<strong>如果你的js文件在DOM解析完成之前下载完毕的话</strong>）。</p><h3 id="我要极限优化，拒绝白屏"><a href="#我要极限优化，拒绝白屏" class="headerlink" title="我要极限优化，拒绝白屏"></a>我要极限优化，拒绝白屏</h3><p>我观察了目前网上的一些资料，几乎都是提到js下载过程中导致的DOM解析阻塞，而丝毫不提js在执行导致的阻塞。为什么呢？因为与下载所耗费的时间比起来，解析那一点点时间根本不算什么。</p><p>如果你是一个前端优化的极限狂，那么你就要意识到js执行导致的DOM解析阻塞（两种情况的第一种），从而使后续的layout、paint工作延缓，出现白屏这一个问题。</p><p>解决方案：<strong>首先要明确一点，我今天不是来教大家写AMD loader的。</strong> 我们思考一下，js执行会阻塞DOM解析，那么是不是意味着部分浏览器将他们放在了同一个线程里呢？如果我们能将js执行工作放在DOM解析工作之后就好了。那么你了解js的异步的实现以及任务队列原理吗？ok，我今天不提这个，我们尝试使用setTimeout(mainFunction, 0)将这个js文件执行代码加入任务队列，如果没错的话，它的优先级应该在DOM解析之下。</p><p>大功告成，经过多次试验，浏览器确实不会因为js的执行而出现过长的白屏时间啦！</p><p>拓展：</p><ul><li>你问我知不知道defer？区别是什么呢？</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;万年被提起的老题：”同学，浏览器是如何加载一个页面哒？”&lt;br&gt;好吧，你要我从&lt;em&gt;浏览器识别URL&lt;/em&gt;到&lt;em&gt;DNS(各种机制)获取真实IP&lt;/em&gt;说起呢？还是从&lt;em&gt;建立TCP连接&lt;/em&gt;(各种繁琐的特性以及与UDP的区别)到&lt;em&gt;web服务器处理GET请求&lt;/em&gt;说起呢？其实我今天要到特别说的是，从服务器发回index.html，浏览器获取到html数据那一刻开始。&lt;strong&gt;大部分浏览器&lt;/strong&gt;是如何做的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://www.noddl.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://www.noddl.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="http://www.noddl.me/2017/02/23/preface/"/>
    <id>http://www.noddl.me/2017/02/23/preface/</id>
    <published>2017-02-23T15:46:00.000Z</published>
    <updated>2018-03-18T12:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>早在两年前，我刚上大学不久时，就承诺母亲要写篇文字，来作为前十年所写文章的序。我如今尚未成为名人大家，所写文章欣赏之人也是寥寥无几，自然的，序也肯定只能由自己来写。</p><a id="more"></a><p>仔细剖析了一番，拖这么久的原因其实是没有勇气对之前所写的文字做一个总结。这一篇篇文章，有些甚至字数少到能一眼就读完，但是都像是自己一步步的脚印，那些白纸黑字记录着当时的所见所想。我找不到合适的语言去描述自己的那些影子，那些是透过文字折射出的自己。这些年来只顾着一味地前进，几乎没有多出的时间来回头看看自己曾经的模样，以至于时间一长，甚至到了害怕回眸的地步。</p><p>课本以外的诗背得真不比同龄人多，而且我还擅长健忘此类的文字。但是关于那首少年不知愁滋味，从初二瞥过的那一眼起，我便再也没有忘记过。“少年不识愁滋味，爱上层楼，爱上层楼，为赋新词强说愁。而今识得愁滋味，欲说还休，欲说还休，却道天凉好个秋。”当时我认定辛弃疾写的是我，在讲述我在写作方面的思绪。正如在我这些文章里，无病呻吟的文风且不多，但是积极向上的正能量文章还真的没有。当时可谓是“未曾经历过真正的沧桑，却失守了最后一点年少意气”了吧。所幸的是没有老师或同学如是将我批判一番，他们只会说：周以恒，你写的作文太苍白了。</p><p>这些文章，开心时写下的，滴着眼泪写下的，考试时奋笔疾书写下的，甚至是在厕所里为了赶作业写下的，都是我的珍宝。如今，我只想将它们献给两个人。一个是我的母亲，她值得拥有我文章里全部的回忆，也只有她才配得上去理解我的所感所写。我并不会说些什么诸如“感谢母亲的养育之恩”的腔调，我将这里一切的文字统统交给了她，是因为她是作为一个朋友，看着我的成长，辅佐着我的进步，我所写的每一个笔画，可谓是都带有她诤友般的理解与包容。突然想起她与我说的最多的话，除了”妈妈爱你”之外，应该就是”我们两个是好朋友呀”了吧。</p><p>第二个人，毫无疑问的是我自己。这么多年下来，一路拼搏，结果或好或差，都是自己选择的道路。在坚持不下去的时候，或是在再次怀揣着梦想的时候，都有自己的声音在脑海里回荡：“再坚持一会儿”亦或是“管他的，放弃吧”。感谢自己能在前十年的各个阶段里，或多或少留下了一些能够唤起回忆的文字。让我在不断前进时，能够有幸回头看看自己以前那些青涩的模样，从那个用拼音代替不会写的字的小学生，到那个为了拼凑八百字应试作文而满头大汗的初中生，再到时时刻刻渴望抒发自己个性、激扬文字的高中生。还是与家人出游、烦心事等等，几乎都有记录。唯一略有遗憾的是，我并没有写日记的习惯，不然回忆说不定还能再多一些。</p><p>我人生中的第一个十年，是在一个小镇里度过的。他没有赋予我洞悉人心冷暖的慧眼，他也没有教我如何去阿谀去争雄。小镇在我的记忆里，永远像是一个避风港，没有激勇的暗流，也掀不起波澜。在之后的十年中，因为缺少必要的谋略落后于他人时，我曾暗暗在心内埋怨过小镇不曾教过我高深的为人处世之道。然而每当此时，当我从异乡疲惫地回到小镇里，他却笑着告诉我，隔壁的小孩子又被街头那条老狗吓得哇哇大哭，常去的水库里的水前几天被抽干后露出了光秃秃的峭壁，或是后山的梯田中的油菜花开了，漫山遍野就像是这美好盛世。可能他不曾言语任何有关于外面的世界，可他又真真切切地驻守在我的思绪里一直展开着怀抱，让我清楚地知道在远方的某个地方，有一扇门永远为我敞开，而他则会在我归家时，递上一只松果，眯着眼说：“瞧，刚刚啃过它的松鼠，尾巴亮黄地像是油漆里浸泡过的一样。”</p><p>第二个十年过得最为坎坷，也正如文章中所透出的挣扎与徘徊一样。我渴望回到舒适的环境，却又不愿落于人后，身后的荣誉与我远去，身前却又是茫然一片。遇到了一些奇奇怪怪的人和事，他们皆与我之前的世界不同，我看不破他们想做些什么，也想不清楚自己应该做些什么，因此我接连碰壁，跌入谷底。每当能够见到曙光的时候，我就写下一篇文章来记录这难得的好消息。所以这一时期的文章不是在糖罐中缔造的，而是在痛苦中催生的药后冰糖，这个时期的文章或多或少都见证了我当时的彷徨与无奈。</p><p>有些人只明白人生就像是一本八九十页的短篇小说，翻过了就没有再翻回头的道理，所以他们写下鸡汤，所以他们告诫年轻人要懂得珍惜。他们除了时光给予的皱褶以外，其余什么都没有留下，我不希望自己成为那种人。我不光要将人生这本书体验地淋漓尽致，还要写下最美的诗篇，来记录自己曾经的鲁莽冲动，让自己在最后几页时光中，不是凭着一把破伞、一口快掉光的黄牙，来空述自己年轻时的林林总总。此书便是为此目的而存在于世的，或者说，此书就是我人生的一个缩影。</p><p>2017-02-23 23:46</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早在两年前，我刚上大学不久时，就承诺母亲要写篇文字，来作为前十年所写文章的序。我如今尚未成为名人大家，所写文章欣赏之人也是寥寥无几，自然的，序也肯定只能由自己来写。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.noddl.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="生活" scheme="http://www.noddl.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>webhook革命 使用fish-hook自动部署多个应用</title>
    <link href="http://www.noddl.me/2017/02/21/fish_hook/"/>
    <id>http://www.noddl.me/2017/02/21/fish_hook/</id>
    <published>2017-02-21T05:00:00.000Z</published>
    <updated>2018-03-18T11:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>一站式高效管理你多个github webhook.<br>Github地址: <a href="https://github.com/dcalsky/fish-hook" target="_blank" rel="noopener">https://github.com/dcalsky/fish-hook</a><br><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>等你辛苦建立好了静态博客，却依然要忍受每次本地更新后，<strong>还要ssh到远程重新git pull一遍的痛苦。</strong></p><p>当你终于用webhook handler写了一堆代码来解决这个应用的部署问题后，你依然发现，还有许许多多的项目等着你为它们写部署代码。</p><p>要是有一个集成化的工具，在一个目录里帮我管理所有的webhook就好了！fish-hook就是为此诞生的，它最大的特色就是：极力缩短开发者花在配置上的时间，约定大于配置。</p><!-- more --><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装python3.5或更高版本，再用pip包管理工具安装fish-hook<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install fish-hook</div></pre></td></tr></table></figure></p><h3 id="新建fish-hook目录"><a href="#新建fish-hook目录" class="headerlink" title="新建fish-hook目录"></a>新建fish-hook目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fish-hook init</div></pre></td></tr></table></figure><p>ssh进入远程主机后，运行该命令，并且设置一个通用的端口，例如: 2333。这样就创建了名为<code>fish</code>的目录，这是控制所有webhook的总目录。<code>$ cd fish</code>进入该目录。</p><h3 id="接收端-为一个仓库创建webhook"><a href="#接收端-为一个仓库创建webhook" class="headerlink" title="接收端: 为一个仓库创建webhook"></a>接收端: 为一个仓库创建webhook</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fish-hook new</div></pre></td></tr></table></figure><p>假如你在github上开通了一个名为<code>blog</code>的仓库，并且打算为其开通webhook来实现自动部署。那么就输入<code>blog</code>以及你要为此webhook设定的密钥。<br>完成后，<code>blog</code>的webhook接收端就部署好了。</p><h3 id="发送端-在github上创建webhook"><a href="#发送端-在github上创建webhook" class="headerlink" title="发送端: 在github上创建webhook"></a>发送端: 在github上创建webhook</h3><p>首先打开仓库的github设置页面，然后创建github webhook，填入基本信息。<br>可以注意到<code>Payload URL</code>这一栏，前面的IP地址就是你<code>远程主机的外网IP地址</code>，之后是你刚刚设置的端口，斜杆后就是<code>blog</code>目录，<strong>与接收端的名字相同</strong>。<br>密钥一栏当然也要与在fish-hook上设置的相同。</p><p><img src="https://camo.githubusercontent.com/c5d4b2208bc11a1db6afe95ada348a990b4d0c8f/687474703a2f2f7374617469632e6e6f64646c2e6d652f316430313036353332313930393762336166373631636461336461353565356236393862623737652d653734383330336363386563336134343637313137616437663133306565313266383830623465332e706e67" alt="webhook"></p><h3 id="设置接受push事件后的动作"><a href="#设置接受push事件后的动作" class="headerlink" title="设置接受push事件后的动作"></a>设置接受push事件后的动作</h3><p>假设你使用<code>git push</code>推送了新的内容到blog仓库，如何执行特定的shell脚本呢？<br>此时的fish-hook目录是这样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fish/</div><div class="line">config.json</div><div class="line">blog/</div><div class="line">app_config.json</div><div class="line">push.sh</div></pre></td></tr></table></figure></p><p>为什么有一个push.sh文件呢？就这意味着，当你仓库接受新的push事件后，fish-hook就会运行<code>push.sh</code>这个shell脚本，里面的内容完全可以自己设置。</p><p>这就是所谓的<code>约定大于配置</code>，webhook接受到什么样的命令，就会运行<code>相同名字</code>的shell脚本，当然前提是你的目录里要存在这个脚本。</p><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fish-hook server</div></pre></td></tr></table></figure><p>fish-hook为你封装了部署所需的web server。一条命令即可启动，此时所有的webhook都会被启用。</p><h3 id="开启2333端口"><a href="#开启2333端口" class="headerlink" title="开启2333端口"></a>开启2333端口</h3><p>centos默认开启了端口防火墙，如果你使用了一些具备安全组的云主机服务，<strong>也需要开放所有安全组哦。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo firewall-cmd --zone=public --add-port=2333/tcp --permanent</div></pre></td></tr></table></figure></p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><h3 id="使用Screen"><a href="#使用Screen" class="headerlink" title="使用Screen"></a>使用Screen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ screen -d -m fish-hook server</div></pre></td></tr></table></figure><p>在<code>fish-hook</code>主目录运行该命令，即可使fish-hook server持久运行下去。</p><h2 id="webhook-事件们"><a href="#webhook-事件们" class="headerlink" title="webhook 事件们"></a>webhook 事件们</h2><p><a href="https://github.com/dcalsky/fish-hook#events" target="_blank" rel="noopener">events</a></p><h2 id="更多帮助"><a href="#更多帮助" class="headerlink" title="更多帮助"></a>更多帮助</h2><p>请查看github仓库<a href="https://github.com/dcalsky/fish-hook" target="_blank" rel="noopener">fish-hook</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一站式高效管理你多个github webhook.&lt;br&gt;Github地址: &lt;a href=&quot;https://github.com/dcalsky/fish-hook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/dcalsky/fish-hook&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.noddl.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="http://www.noddl.me/tags/github/"/>
    
      <category term="部署" scheme="http://www.noddl.me/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="python" scheme="http://www.noddl.me/tags/python/"/>
    
      <category term="webhook" scheme="http://www.noddl.me/tags/webhook/"/>
    
  </entry>
  
</feed>
